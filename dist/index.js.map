{"version":3,"file":"index.js","sources":["../src/estraverse.js","../src/esutilslib/code.js","../src/escodegen.js"],"sourcesContent":["/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n// /*global exports:true*/\n// (function clone(exports) {\n\"use strict\";\n\nvar Syntax,\n    isArray,\n    VisitorOption,\n    VisitorKeys,\n    objectCreate,\n    objectKeys,\n    BREAK,\n    SKIP,\n    REMOVE;\n\nfunction ignoreJSHintError() {}\n\nisArray = Array.isArray;\nif (!isArray) {\n    isArray = function isArray(array) {\n        return Object.prototype.toString.call(array) === \"[object Array]\";\n    };\n}\n\nfunction deepCopy(obj) {\n    var ret = {},\n        key,\n        val;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            val = obj[key];\n            if (typeof val === \"object\" && val !== null) {\n                ret[key] = deepCopy(val);\n            } else {\n                ret[key] = val;\n            }\n        }\n    }\n    return ret;\n}\n\nfunction shallowCopy(obj) {\n    var ret = {},\n        key;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\nignoreJSHintError(shallowCopy);\n\n// based on LLVM libc++ upper_bound / lower_bound\n// MIT License\n\nfunction upperBound(array, func) {\n    var diff, len, i, current;\n\n    len = array.length;\n    i = 0;\n\n    while (len) {\n        diff = len >>> 1;\n        current = i + diff;\n        if (func(array[current])) {\n            len = diff;\n        } else {\n            i = current + 1;\n            len -= diff + 1;\n        }\n    }\n    return i;\n}\n\nfunction lowerBound(array, func) {\n    var diff, len, i, current;\n\n    len = array.length;\n    i = 0;\n\n    while (len) {\n        diff = len >>> 1;\n        current = i + diff;\n        if (func(array[current])) {\n            i = current + 1;\n            len -= diff + 1;\n        } else {\n            len = diff;\n        }\n    }\n    return i;\n}\nignoreJSHintError(lowerBound);\n\nobjectCreate =\n    Object.create ||\n    (function () {\n        function F() {}\n\n        return function (o) {\n            F.prototype = o;\n            return new F();\n        };\n    })();\n\nobjectKeys =\n    Object.keys ||\n    function (o) {\n        var keys = [],\n            key;\n        for (key in o) {\n            keys.push(key);\n        }\n        return keys;\n    };\n\nfunction extend(to, from) {\n    var keys = objectKeys(from),\n        key,\n        i,\n        len;\n    for (i = 0, len = keys.length; i < len; i += 1) {\n        key = keys[i];\n        to[key] = from[key];\n    }\n    return to;\n}\n\nSyntax = {\n    AssignmentExpression: \"AssignmentExpression\",\n    AssignmentPattern: \"AssignmentPattern\",\n    ArrayExpression: \"ArrayExpression\",\n    ArrayPattern: \"ArrayPattern\",\n    ArrowFunctionExpression: \"ArrowFunctionExpression\",\n    AwaitExpression: \"AwaitExpression\", // CAUTION: It's deferred to ES7.\n    BlockStatement: \"BlockStatement\",\n    BinaryExpression: \"BinaryExpression\",\n    BreakStatement: \"BreakStatement\",\n    CallExpression: \"CallExpression\",\n    CatchClause: \"CatchClause\",\n    ClassBody: \"ClassBody\",\n    ClassDeclaration: \"ClassDeclaration\",\n    ClassExpression: \"ClassExpression\",\n    ComprehensionBlock: \"ComprehensionBlock\", // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: \"ComprehensionExpression\", // CAUTION: It's deferred to ES7.\n    ConditionalExpression: \"ConditionalExpression\",\n    ContinueStatement: \"ContinueStatement\",\n    DebuggerStatement: \"DebuggerStatement\",\n    DirectiveStatement: \"DirectiveStatement\",\n    DoWhileStatement: \"DoWhileStatement\",\n    EmptyStatement: \"EmptyStatement\",\n    ExportAllDeclaration: \"ExportAllDeclaration\",\n    ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n    ExportNamedDeclaration: \"ExportNamedDeclaration\",\n    ExportSpecifier: \"ExportSpecifier\",\n    ExpressionStatement: \"ExpressionStatement\",\n    ForStatement: \"ForStatement\",\n    ForInStatement: \"ForInStatement\",\n    ForOfStatement: \"ForOfStatement\",\n    FunctionDeclaration: \"FunctionDeclaration\",\n    FunctionExpression: \"FunctionExpression\",\n    GeneratorExpression: \"GeneratorExpression\", // CAUTION: It's deferred to ES7.\n    Identifier: \"Identifier\",\n    IfStatement: \"IfStatement\",\n    ImportDeclaration: \"ImportDeclaration\",\n    ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n    ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\",\n    ImportSpecifier: \"ImportSpecifier\",\n    Literal: \"Literal\",\n    LabeledStatement: \"LabeledStatement\",\n    LogicalExpression: \"LogicalExpression\",\n    MemberExpression: \"MemberExpression\",\n    MetaProperty: \"MetaProperty\",\n    MethodDefinition: \"MethodDefinition\",\n    ModuleSpecifier: \"ModuleSpecifier\",\n    NewExpression: \"NewExpression\",\n    ObjectExpression: \"ObjectExpression\",\n    ObjectPattern: \"ObjectPattern\",\n    Program: \"Program\",\n    Property: \"Property\",\n    RestElement: \"RestElement\",\n    ReturnStatement: \"ReturnStatement\",\n    SequenceExpression: \"SequenceExpression\",\n    SpreadElement: \"SpreadElement\",\n    Super: \"Super\",\n    SwitchStatement: \"SwitchStatement\",\n    SwitchCase: \"SwitchCase\",\n    TaggedTemplateExpression: \"TaggedTemplateExpression\",\n    TemplateElement: \"TemplateElement\",\n    TemplateLiteral: \"TemplateLiteral\",\n    ThisExpression: \"ThisExpression\",\n    ThrowStatement: \"ThrowStatement\",\n    TryStatement: \"TryStatement\",\n    UnaryExpression: \"UnaryExpression\",\n    UpdateExpression: \"UpdateExpression\",\n    VariableDeclaration: \"VariableDeclaration\",\n    VariableDeclarator: \"VariableDeclarator\",\n    WhileStatement: \"WhileStatement\",\n    WithStatement: \"WithStatement\",\n    YieldExpression: \"YieldExpression\",\n};\n\nVisitorKeys = {\n    AssignmentExpression: [\"left\", \"right\"],\n    AssignmentPattern: [\"left\", \"right\"],\n    ArrayExpression: [\"elements\"],\n    ArrayPattern: [\"elements\"],\n    ArrowFunctionExpression: [\"params\", \"body\"],\n    AwaitExpression: [\"argument\"], // CAUTION: It's deferred to ES7.\n    BlockStatement: [\"body\"],\n    BinaryExpression: [\"left\", \"right\"],\n    BreakStatement: [\"label\"],\n    CallExpression: [\"callee\", \"arguments\"],\n    CatchClause: [\"param\", \"body\"],\n    ClassBody: [\"body\"],\n    ClassDeclaration: [\"id\", \"superClass\", \"body\"],\n    ClassExpression: [\"id\", \"superClass\", \"body\"],\n    ComprehensionBlock: [\"left\", \"right\"], // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: [\"blocks\", \"filter\", \"body\"], // CAUTION: It's deferred to ES7.\n    ConditionalExpression: [\"test\", \"consequent\", \"alternate\"],\n    ContinueStatement: [\"label\"],\n    DebuggerStatement: [],\n    DirectiveStatement: [],\n    DoWhileStatement: [\"body\", \"test\"],\n    EmptyStatement: [],\n    ExportAllDeclaration: [\"source\"],\n    ExportDefaultDeclaration: [\"declaration\"],\n    ExportNamedDeclaration: [\"declaration\", \"specifiers\", \"source\"],\n    ExportSpecifier: [\"exported\", \"local\"],\n    ExpressionStatement: [\"expression\"],\n    ForStatement: [\"init\", \"test\", \"update\", \"body\"],\n    ForInStatement: [\"left\", \"right\", \"body\"],\n    ForOfStatement: [\"left\", \"right\", \"body\"],\n    FunctionDeclaration: [\"id\", \"params\", \"body\"],\n    FunctionExpression: [\"id\", \"params\", \"body\"],\n    GeneratorExpression: [\"blocks\", \"filter\", \"body\"], // CAUTION: It's deferred to ES7.\n    Identifier: [],\n    IfStatement: [\"test\", \"consequent\", \"alternate\"],\n    ImportDeclaration: [\"specifiers\", \"source\"],\n    ImportDefaultSpecifier: [\"local\"],\n    ImportNamespaceSpecifier: [\"local\"],\n    ImportSpecifier: [\"imported\", \"local\"],\n    Literal: [],\n    LabeledStatement: [\"label\", \"body\"],\n    LogicalExpression: [\"left\", \"right\"],\n    MemberExpression: [\"object\", \"property\"],\n    MetaProperty: [\"meta\", \"property\"],\n    MethodDefinition: [\"key\", \"value\"],\n    ModuleSpecifier: [],\n    NewExpression: [\"callee\", \"arguments\"],\n    ObjectExpression: [\"properties\"],\n    ObjectPattern: [\"properties\"],\n    Program: [\"body\"],\n    Property: [\"key\", \"value\"],\n    RestElement: [\"argument\"],\n    ReturnStatement: [\"argument\"],\n    SequenceExpression: [\"expressions\"],\n    SpreadElement: [\"argument\"],\n    Super: [],\n    SwitchStatement: [\"discriminant\", \"cases\"],\n    SwitchCase: [\"test\", \"consequent\"],\n    TaggedTemplateExpression: [\"tag\", \"quasi\"],\n    TemplateElement: [],\n    TemplateLiteral: [\"quasis\", \"expressions\"],\n    ThisExpression: [],\n    ThrowStatement: [\"argument\"],\n    TryStatement: [\"block\", \"handler\", \"finalizer\"],\n    UnaryExpression: [\"argument\"],\n    UpdateExpression: [\"argument\"],\n    VariableDeclaration: [\"declarations\"],\n    VariableDeclarator: [\"id\", \"init\"],\n    WhileStatement: [\"test\", \"body\"],\n    WithStatement: [\"object\", \"body\"],\n    YieldExpression: [\"argument\"],\n};\n\n// unique id\nBREAK = {};\nSKIP = {};\nREMOVE = {};\n\nVisitorOption = {\n    Break: BREAK,\n    Skip: SKIP,\n    Remove: REMOVE,\n};\n\nfunction Reference(parent, key) {\n    this.parent = parent;\n    this.key = key;\n}\n\nReference.prototype.replace = function replace(node) {\n    this.parent[this.key] = node;\n};\n\nReference.prototype.remove = function remove() {\n    if (isArray(this.parent)) {\n        this.parent.splice(this.key, 1);\n        return true;\n    } else {\n        this.replace(null);\n        return false;\n    }\n};\n\nfunction Element(node, path, wrap, ref) {\n    this.node = node;\n    this.path = path;\n    this.wrap = wrap;\n    this.ref = ref;\n}\n\nfunction Controller() {}\n\n// API:\n// return property path array from root to current node\nController.prototype.path = function path() {\n    var i, iz, j, jz, result, element;\n\n    function addToPath(result, path) {\n        if (isArray(path)) {\n            for (j = 0, jz = path.length; j < jz; ++j) {\n                result.push(path[j]);\n            }\n        } else {\n            result.push(path);\n        }\n    }\n\n    // root node\n    if (!this.__current.path) {\n        return null;\n    }\n\n    // first node is sentinel, second node is root element\n    result = [];\n    for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n        element = this.__leavelist[i];\n        addToPath(result, element.path);\n    }\n    addToPath(result, this.__current.path);\n    return result;\n};\n\n// API:\n// return type of current node\nController.prototype.type = function () {\n    var node = this.current();\n    return node.type || this.__current.wrap;\n};\n\n// API:\n// return array of parent elements\nController.prototype.parents = function parents() {\n    var i, iz, result;\n\n    // first node is sentinel\n    result = [];\n    for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n        result.push(this.__leavelist[i].node);\n    }\n\n    return result;\n};\n\n// API:\n// return current node\nController.prototype.current = function current() {\n    return this.__current.node;\n};\n\nController.prototype.__execute = function __execute(callback, element) {\n    var previous, result;\n\n    result = undefined;\n\n    previous = this.__current;\n    this.__current = element;\n    this.__state = null;\n    if (callback) {\n        result = callback.call(\n            this,\n            element.node,\n            this.__leavelist[this.__leavelist.length - 1].node\n        );\n    }\n    this.__current = previous;\n\n    return result;\n};\n\n// API:\n// notify control skip / break\nController.prototype.notify = function notify(flag) {\n    this.__state = flag;\n};\n\n// API:\n// skip child nodes of current node\nController.prototype.skip = function () {\n    this.notify(SKIP);\n};\n\n// API:\n// break traversals\nController.prototype[\"break\"] = function () {\n    this.notify(BREAK);\n};\n\n// API:\n// remove node\nController.prototype.remove = function () {\n    this.notify(REMOVE);\n};\n\nController.prototype.__initialize = function (root, visitor) {\n    this.visitor = visitor;\n    this.root = root;\n    this.__worklist = [];\n    this.__leavelist = [];\n    this.__current = null;\n    this.__state = null;\n    this.__fallback = null;\n    if (visitor.fallback === \"iteration\") {\n        this.__fallback = objectKeys;\n    } else if (typeof visitor.fallback === \"function\") {\n        this.__fallback = visitor.fallback;\n    }\n\n    this.__keys = VisitorKeys;\n    if (visitor.keys) {\n        this.__keys = extend(objectCreate(this.__keys), visitor.keys);\n    }\n};\n\nfunction isNode(node) {\n    if (node == null) {\n        return false;\n    }\n    return typeof node === \"object\" && typeof node.type === \"string\";\n}\n\nfunction isProperty(nodeType, key) {\n    return (\n        (nodeType === Syntax.ObjectExpression ||\n            nodeType === Syntax.ObjectPattern) &&\n        \"properties\" === key\n    );\n}\n\nController.prototype.traverse = function traverse(root, visitor) {\n    var worklist,\n        leavelist,\n        element,\n        node,\n        nodeType,\n        ret,\n        key,\n        current,\n        current2,\n        candidates,\n        candidate,\n        sentinel;\n\n    this.__initialize(root, visitor);\n\n    sentinel = {};\n\n    // reference\n    worklist = this.__worklist;\n    leavelist = this.__leavelist;\n\n    // initialize\n    worklist.push(new Element(root, null, null, null));\n    leavelist.push(new Element(null, null, null, null));\n\n    while (worklist.length) {\n        element = worklist.pop();\n\n        if (element === sentinel) {\n            element = leavelist.pop();\n\n            ret = this.__execute(visitor.leave, element);\n\n            if (this.__state === BREAK || ret === BREAK) {\n                return;\n            }\n            continue;\n        }\n\n        if (element.node) {\n            ret = this.__execute(visitor.enter, element);\n\n            if (this.__state === BREAK || ret === BREAK) {\n                return;\n            }\n\n            worklist.push(sentinel);\n            leavelist.push(element);\n\n            if (this.__state === SKIP || ret === SKIP) {\n                continue;\n            }\n\n            node = element.node;\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) {\n                    candidates = this.__fallback(node);\n                } else {\n                    throw new Error(\"Unknown node type \" + nodeType + \".\");\n                }\n            }\n\n            current = candidates.length;\n            while ((current -= 1) >= 0) {\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n\n                if (isArray(candidate)) {\n                    current2 = candidate.length;\n                    while ((current2 -= 1) >= 0) {\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if (isProperty(nodeType, candidates[current])) {\n                            element = new Element(\n                                candidate[current2],\n                                [key, current2],\n                                \"Property\",\n                                null\n                            );\n                        } else if (isNode(candidate[current2])) {\n                            element = new Element(\n                                candidate[current2],\n                                [key, current2],\n                                null,\n                                null\n                            );\n                        } else {\n                            continue;\n                        }\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) {\n                    worklist.push(new Element(candidate, key, null, null));\n                }\n            }\n        }\n    }\n};\n\nController.prototype.replace = function replace(root, visitor) {\n    var worklist,\n        leavelist,\n        node,\n        nodeType,\n        target,\n        element,\n        current,\n        current2,\n        candidates,\n        candidate,\n        sentinel,\n        outer,\n        key;\n\n    function removeElem(element) {\n        var i, key, nextElem, parent;\n\n        if (element.ref.remove()) {\n            // When the reference is an element of an array.\n            key = element.ref.key;\n            parent = element.ref.parent;\n\n            // If removed from array, then decrease following items' keys.\n            i = worklist.length;\n            while (i--) {\n                nextElem = worklist[i];\n                if (nextElem.ref && nextElem.ref.parent === parent) {\n                    if (nextElem.ref.key < key) {\n                        break;\n                    }\n                    --nextElem.ref.key;\n                }\n            }\n        }\n    }\n\n    this.__initialize(root, visitor);\n\n    sentinel = {};\n\n    // reference\n    worklist = this.__worklist;\n    leavelist = this.__leavelist;\n\n    // initialize\n    outer = {\n        root: root,\n    };\n    element = new Element(root, null, null, new Reference(outer, \"root\"));\n    worklist.push(element);\n    leavelist.push(element);\n\n    while (worklist.length) {\n        element = worklist.pop();\n\n        if (element === sentinel) {\n            element = leavelist.pop();\n\n            target = this.__execute(visitor.leave, element);\n\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (\n                target !== undefined &&\n                target !== BREAK &&\n                target !== SKIP &&\n                target !== REMOVE\n            ) {\n                // replace\n                element.ref.replace(target);\n            }\n\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n            }\n\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n            continue;\n        }\n\n        target = this.__execute(visitor.enter, element);\n\n        // node may be replaced with null,\n        // so distinguish between undefined and null in this place\n        if (\n            target !== undefined &&\n            target !== BREAK &&\n            target !== SKIP &&\n            target !== REMOVE\n        ) {\n            // replace\n            element.ref.replace(target);\n            element.node = target;\n        }\n\n        if (this.__state === REMOVE || target === REMOVE) {\n            removeElem(element);\n            element.node = null;\n        }\n\n        if (this.__state === BREAK || target === BREAK) {\n            return outer.root;\n        }\n\n        // node may be null\n        node = element.node;\n        if (!node) {\n            continue;\n        }\n\n        worklist.push(sentinel);\n        leavelist.push(element);\n\n        if (this.__state === SKIP || target === SKIP) {\n            continue;\n        }\n\n        nodeType = node.type || element.wrap;\n        candidates = this.__keys[nodeType];\n        if (!candidates) {\n            if (this.__fallback) {\n                candidates = this.__fallback(node);\n            } else {\n                throw new Error(\"Unknown node type \" + nodeType + \".\");\n            }\n        }\n\n        current = candidates.length;\n        while ((current -= 1) >= 0) {\n            key = candidates[current];\n            candidate = node[key];\n            if (!candidate) {\n                continue;\n            }\n\n            if (isArray(candidate)) {\n                current2 = candidate.length;\n                while ((current2 -= 1) >= 0) {\n                    if (!candidate[current2]) {\n                        continue;\n                    }\n                    if (isProperty(nodeType, candidates[current])) {\n                        element = new Element(\n                            candidate[current2],\n                            [key, current2],\n                            \"Property\",\n                            new Reference(candidate, current2)\n                        );\n                    } else if (isNode(candidate[current2])) {\n                        element = new Element(\n                            candidate[current2],\n                            [key, current2],\n                            null,\n                            new Reference(candidate, current2)\n                        );\n                    } else {\n                        continue;\n                    }\n                    worklist.push(element);\n                }\n            } else if (isNode(candidate)) {\n                worklist.push(\n                    new Element(candidate, key, null, new Reference(node, key))\n                );\n            }\n        }\n    }\n\n    return outer.root;\n};\n\nfunction traverse(root, visitor) {\n    var controller = new Controller();\n    return controller.traverse(root, visitor);\n}\n\nfunction replace(root, visitor) {\n    var controller = new Controller();\n    return controller.replace(root, visitor);\n}\n\nfunction extendCommentRange(comment, tokens) {\n    var target;\n\n    target = upperBound(tokens, function search(token) {\n        return token.range[0] > comment.range[0];\n    });\n\n    comment.extendedRange = [comment.range[0], comment.range[1]];\n\n    if (target !== tokens.length) {\n        comment.extendedRange[1] = tokens[target].range[0];\n    }\n\n    target -= 1;\n    if (target >= 0) {\n        comment.extendedRange[0] = tokens[target].range[1];\n    }\n\n    return comment;\n}\n\nfunction attachComments(tree, providedComments, tokens) {\n    // At first, we should calculate extended comment ranges.\n    var comments = [],\n        comment,\n        len,\n        i,\n        cursor;\n\n    if (!tree.range) {\n        throw new Error(\"attachComments needs range information\");\n    }\n\n    // tokens array is empty, we attach comments to tree as 'leadingComments'\n    if (!tokens.length) {\n        if (providedComments.length) {\n            for (i = 0, len = providedComments.length; i < len; i += 1) {\n                comment = deepCopy(providedComments[i]);\n                comment.extendedRange = [0, tree.range[0]];\n                comments.push(comment);\n            }\n            tree.leadingComments = comments;\n        }\n        return tree;\n    }\n\n    for (i = 0, len = providedComments.length; i < len; i += 1) {\n        comments.push(\n            extendCommentRange(deepCopy(providedComments[i]), tokens)\n        );\n    }\n\n    // This is based on John Freeman's implementation.\n    cursor = 0;\n    traverse(tree, {\n        enter: function (node) {\n            var comment;\n\n            while (cursor < comments.length) {\n                comment = comments[cursor];\n                if (comment.extendedRange[1] > node.range[0]) {\n                    break;\n                }\n\n                if (comment.extendedRange[1] === node.range[0]) {\n                    if (!node.leadingComments) {\n                        node.leadingComments = [];\n                    }\n                    node.leadingComments.push(comment);\n                    comments.splice(cursor, 1);\n                } else {\n                    cursor += 1;\n                }\n            }\n\n            // already out of owned node\n            if (cursor === comments.length) {\n                return VisitorOption.Break;\n            }\n\n            if (comments[cursor].extendedRange[0] > node.range[1]) {\n                return VisitorOption.Skip;\n            }\n        },\n    });\n\n    cursor = 0;\n    traverse(tree, {\n        leave: function (node) {\n            var comment;\n\n            while (cursor < comments.length) {\n                comment = comments[cursor];\n                if (node.range[1] < comment.extendedRange[0]) {\n                    break;\n                }\n\n                if (node.range[1] === comment.extendedRange[0]) {\n                    if (!node.trailingComments) {\n                        node.trailingComments = [];\n                    }\n                    node.trailingComments.push(comment);\n                    comments.splice(cursor, 1);\n                } else {\n                    cursor += 1;\n                }\n            }\n\n            // already out of owned node\n            if (cursor === comments.length) {\n                return VisitorOption.Break;\n            }\n\n            if (comments[cursor].extendedRange[0] > node.range[1]) {\n                return VisitorOption.Skip;\n            }\n        },\n    });\n\n    return tree;\n}\n\n// exports.version = require('./package.json').version;\nconst _Syntax = Syntax;\nexport { _Syntax as Syntax };\nconst _traverse = traverse;\nexport { _traverse as traverse };\nconst _replace = replace;\nexport { _replace as replace };\nconst _attachComments = attachComments;\nexport { _attachComments as attachComments };\nconst _VisitorKeys = VisitorKeys;\nexport { _VisitorKeys as VisitorKeys };\nconst _VisitorOption = VisitorOption;\nexport { _VisitorOption as VisitorOption };\nconst _Controller = Controller;\nexport { _Controller as Controller };\nexport const version = \"4.2.0\";\n// exports.cloneEnvironment = function () { return clone({}); };\n\n//     return exports;\n// }(exports));\n/* vim: set sw=4 ts=4 et tw=80 : */\n","/*\n  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n// (function () {\n\"use strict\";\n\nvar ES6Regex,\n    ES5Regex,\n    NON_ASCII_WHITESPACES,\n    IDENTIFIER_START,\n    IDENTIFIER_PART,\n    ch;\n\n// See `tools/generate-identifier-regex.js`.\nES5Regex = {\n    // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:\n    NonAsciiIdentifierStart:\n        /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:\n    NonAsciiIdentifierPart:\n        /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n};\n\nES6Regex = {\n    // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:\n    NonAsciiIdentifierStart:\n        /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n    // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:\n    NonAsciiIdentifierPart:\n        /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n};\n\nfunction isDecimalDigit(ch) {\n    return 0x30 <= ch && ch <= 0x39; // 0..9\n}\n\nfunction isHexDigit(ch) {\n    return (\n        (0x30 <= ch && ch <= 0x39) || // 0..9\n        (0x61 <= ch && ch <= 0x66) || // a..f\n        (0x41 <= ch && ch <= 0x46)\n    ); // A..F\n}\n\nfunction isOctalDigit(ch) {\n    return ch >= 0x30 && ch <= 0x37; // 0..7\n}\n\n// 7.2 White Space\n\nNON_ASCII_WHITESPACES = [\n    0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007,\n    0x2008, 0x2009, 0x200a, 0x202f, 0x205f, 0x3000, 0xfeff,\n];\n\nfunction isWhiteSpace(ch) {\n    return (\n        ch === 0x20 ||\n        ch === 0x09 ||\n        ch === 0x0b ||\n        ch === 0x0c ||\n        ch === 0xa0 ||\n        (ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0)\n    );\n}\n\n// 7.3 Line Terminators\n\nfunction isLineTerminator(ch) {\n    return ch === 0x0a || ch === 0x0d || ch === 0x2028 || ch === 0x2029;\n}\n\n// 7.6 Identifier Names and Identifiers\n\nfunction fromCodePoint(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n    var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xd800);\n    var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xdc00);\n    return cu1 + cu2;\n}\n\nIDENTIFIER_START = new Array(0x80);\nfor (ch = 0; ch < 0x80; ++ch) {\n    IDENTIFIER_START[ch] =\n        (ch >= 0x61 && ch <= 0x7a) || // a..z\n        (ch >= 0x41 && ch <= 0x5a) || // A..Z\n        ch === 0x24 ||\n        ch === 0x5f; // $ (dollar) and _ (underscore)\n}\n\nIDENTIFIER_PART = new Array(0x80);\nfor (ch = 0; ch < 0x80; ++ch) {\n    IDENTIFIER_PART[ch] =\n        (ch >= 0x61 && ch <= 0x7a) || // a..z\n        (ch >= 0x41 && ch <= 0x5a) || // A..Z\n        (ch >= 0x30 && ch <= 0x39) || // 0..9\n        ch === 0x24 ||\n        ch === 0x5f; // $ (dollar) and _ (underscore)\n}\n\nfunction isIdentifierStartES5(ch) {\n    return ch < 0x80\n        ? IDENTIFIER_START[ch]\n        : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));\n}\n\nfunction isIdentifierPartES5(ch) {\n    return ch < 0x80\n        ? IDENTIFIER_PART[ch]\n        : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));\n}\n\nfunction isIdentifierStartES6(ch) {\n    return ch < 0x80\n        ? IDENTIFIER_START[ch]\n        : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));\n}\n\nfunction isIdentifierPartES6(ch) {\n    return ch < 0x80\n        ? IDENTIFIER_PART[ch]\n        : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));\n}\n\n// module.exports = {\n//   isDecimalDigit: isDecimalDigit,\n//   isHexDigit: isHexDigit,\n//   isOctalDigit: isOctalDigit,\n//   isWhiteSpace: isWhiteSpace,\n//   isLineTerminator: isLineTerminator,\n//   isIdentifierStartES5: isIdentifierStartES5,\n//   isIdentifierPartES5: isIdentifierPartES5,\n//   isIdentifierStartES6: isIdentifierStartES6,\n//   isIdentifierPartES6: isIdentifierPartES6\n// };\n// }());\n/* vim: set sw=4 ts=4 et tw=80 : */\nconst _default = {\n    isDecimalDigit: isDecimalDigit,\n    isHexDigit: isHexDigit,\n    isOctalDigit: isOctalDigit,\n    isWhiteSpace: isWhiteSpace,\n    isLineTerminator: isLineTerminator,\n    isIdentifierStartES5: isIdentifierStartES5,\n    isIdentifierPartES5: isIdentifierPartES5,\n    isIdentifierStartES6: isIdentifierStartES6,\n    isIdentifierPartES6: isIdentifierPartES6,\n};\nexport default _default;\n","import { Syntax } from \"./estraverse.js\";\nexport { attachComments } from \"./estraverse.js\";\nimport esutilscode from \"./esutilslib/code.js\";\n// import esutils from \"./esutilslib/utils.js\";\n/*\n  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>\n  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n// /*global exports:true, require:true, global:true*/\n// (function () {\n(\"use strict\");\n\nvar //Syntax,\n    Precedence,\n    BinaryPrecedence,\n    SourceNode,\n    //   estraverse,\n    //   esutils,\n    base,\n    indent,\n    json,\n    renumber,\n    hexadecimal,\n    quotes,\n    escapeless,\n    newline,\n    space,\n    parentheses,\n    semicolons,\n    safeConcatenation,\n    directive,\n    extra,\n    parse,\n    sourceMap = false,\n    sourceCode,\n    preserveBlankLines,\n    FORMAT_MINIFY,\n    FORMAT_DEFAULTS;\n\n// estraverse = require('estraverse');\n// esutils = require('esutils');\n\n// Syntax = estraverse.Syntax;\n\n// Generation is done by generateExpression.\nfunction isExpression(node) {\n    return CodeGenerator.Expression.hasOwnProperty(node.type);\n}\n\n// Generation is done by generateStatement.\nfunction isStatement(node) {\n    return CodeGenerator.Statement.hasOwnProperty(node.type);\n}\n\nPrecedence = {\n    Sequence: 0,\n    Yield: 1,\n    Assignment: 1,\n    Conditional: 2,\n    ArrowFunction: 2,\n    LogicalOR: 3,\n    LogicalAND: 4,\n    BitwiseOR: 5,\n    BitwiseXOR: 6,\n    BitwiseAND: 7,\n    Equality: 8,\n    Relational: 9,\n    BitwiseSHIFT: 10,\n    Additive: 11,\n    Multiplicative: 12,\n    Await: 13,\n    Unary: 13,\n    Postfix: 14,\n    Call: 15,\n    New: 16,\n    TaggedTemplate: 17,\n    Member: 18,\n    Primary: 19,\n};\n\nBinaryPrecedence = {\n    \"||\": Precedence.LogicalOR,\n    \"&&\": Precedence.LogicalAND,\n    \"|\": Precedence.BitwiseOR,\n    \"^\": Precedence.BitwiseXOR,\n    \"&\": Precedence.BitwiseAND,\n    \"==\": Precedence.Equality,\n    \"!=\": Precedence.Equality,\n    \"===\": Precedence.Equality,\n    \"!==\": Precedence.Equality,\n    is: Precedence.Equality,\n    isnt: Precedence.Equality,\n    \"<\": Precedence.Relational,\n    \">\": Precedence.Relational,\n    \"<=\": Precedence.Relational,\n    \">=\": Precedence.Relational,\n    in: Precedence.Relational,\n    instanceof: Precedence.Relational,\n    \"<<\": Precedence.BitwiseSHIFT,\n    \">>\": Precedence.BitwiseSHIFT,\n    \">>>\": Precedence.BitwiseSHIFT,\n    \"+\": Precedence.Additive,\n    \"-\": Precedence.Additive,\n    \"*\": Precedence.Multiplicative,\n    \"%\": Precedence.Multiplicative,\n    \"/\": Precedence.Multiplicative,\n};\n\n//Flags\nvar F_ALLOW_IN = 1,\n    F_ALLOW_CALL = 1 << 1,\n    F_ALLOW_UNPARATH_NEW = 1 << 2,\n    F_FUNC_BODY = 1 << 3,\n    F_DIRECTIVE_CTX = 1 << 4,\n    F_SEMICOLON_OPT = 1 << 5;\n\n//Expression flag sets\n//NOTE: Flag order:\n// F_ALLOW_IN\n// F_ALLOW_CALL\n// F_ALLOW_UNPARATH_NEW\nvar E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n    E_TTF = F_ALLOW_IN | F_ALLOW_CALL,\n    E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n    E_TFF = F_ALLOW_IN,\n    E_FFT = F_ALLOW_UNPARATH_NEW,\n    E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;\n\n//Statement flag sets\n//NOTE: Flag order:\n// F_ALLOW_IN\n// F_FUNC_BODY\n// F_DIRECTIVE_CTX\n// F_SEMICOLON_OPT\nvar S_TFFF = F_ALLOW_IN,\n    S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,\n    S_FFFF = 0x00,\n    S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,\n    S_TTFF = F_ALLOW_IN | F_FUNC_BODY;\n\nfunction getDefaultOptions() {\n    // default options\n    return {\n        indent: null,\n        base: null,\n        parse: null,\n        comment: false,\n        format: {\n            indent: {\n                style: \"    \",\n                base: 0,\n                adjustMultilineComment: false,\n            },\n            newline: \"\\n\",\n            space: \" \",\n            json: false,\n            renumber: false,\n            hexadecimal: false,\n            quotes: \"single\",\n            escapeless: false,\n            compact: false,\n            parentheses: true,\n            semicolons: true,\n            safeConcatenation: false,\n            preserveBlankLines: false,\n        },\n        moz: {\n            comprehensionExpressionStartsWithAssignment: false,\n            starlessGenerator: false,\n        },\n        sourceMap: null,\n        sourceMapRoot: null,\n        sourceMapWithCode: false,\n        directive: false,\n        raw: true,\n        verbatim: null,\n        sourceCode: null,\n    };\n}\n\nfunction stringRepeat(str, num) {\n    var result = \"\";\n\n    for (num |= 0; num > 0; num >>>= 1, str += str) {\n        if (num & 1) {\n            result += str;\n        }\n    }\n\n    return result;\n}\n\nfunction hasLineTerminator(str) {\n    return /[\\r\\n]/g.test(str);\n}\n\nfunction endsWithLineTerminator(str) {\n    var len = str.length;\n    return len && esutilscode.isLineTerminator(str.charCodeAt(len - 1));\n}\n\nfunction merge(target, override) {\n    var key;\n    for (key in override) {\n        if (override.hasOwnProperty(key)) {\n            target[key] = override[key];\n        }\n    }\n    return target;\n}\n\nfunction updateDeeply(target, override) {\n    var key, val;\n\n    function isHashObject(target) {\n        return (\n            typeof target === \"object\" &&\n            target instanceof Object &&\n            !(target instanceof RegExp)\n        );\n    }\n\n    for (key in override) {\n        if (override.hasOwnProperty(key)) {\n            val = override[key];\n            if (isHashObject(val)) {\n                if (isHashObject(target[key])) {\n                    updateDeeply(target[key], val);\n                } else {\n                    target[key] = updateDeeply({}, val);\n                }\n            } else {\n                target[key] = val;\n            }\n        }\n    }\n    return target;\n}\n\nfunction generateNumber(value) {\n    var result, point, temp, exponent, pos;\n\n    if (value !== value) {\n        throw new Error(\"Numeric literal whose value is NaN\");\n    }\n    if (value < 0 || (value === 0 && 1 / value < 0)) {\n        throw new Error(\"Numeric literal whose value is negative\");\n    }\n\n    if (value === 1 / 0) {\n        return json ? \"null\" : renumber ? \"1e400\" : \"1e+400\";\n    }\n\n    result = \"\" + value;\n    if (!renumber || result.length < 3) {\n        return result;\n    }\n\n    point = result.indexOf(\".\");\n    if (!json && result.charCodeAt(0) === 0x30 /* 0 */ && point === 1) {\n        point = 0;\n        result = result.slice(1);\n    }\n    temp = result;\n    result = result.replace(\"e+\", \"e\");\n    exponent = 0;\n    if ((pos = temp.indexOf(\"e\")) > 0) {\n        exponent = +temp.slice(pos + 1);\n        temp = temp.slice(0, pos);\n    }\n    if (point >= 0) {\n        exponent -= temp.length - point - 1;\n        temp = +(temp.slice(0, point) + temp.slice(point + 1)) + \"\";\n    }\n    pos = 0;\n    while (temp.charCodeAt(temp.length + pos - 1) === 0x30 /* 0 */) {\n        --pos;\n    }\n    if (pos !== 0) {\n        exponent -= pos;\n        temp = temp.slice(0, pos);\n    }\n    if (exponent !== 0) {\n        temp += \"e\" + exponent;\n    }\n    if (\n        (temp.length < result.length ||\n            (hexadecimal &&\n                value > 1e12 &&\n                Math.floor(value) === value &&\n                (temp = \"0x\" + value.toString(16)).length < result.length)) &&\n        +temp === value\n    ) {\n        result = temp;\n    }\n\n    return result;\n}\n\n// Generate valid RegExp expression.\n// This function is based on https://github.com/Constellation/iv Engine\n\nfunction escapeRegExpCharacter(ch, previousIsBackslash) {\n    // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n    if ((ch & ~1) === 0x2028) {\n        return (\n            (previousIsBackslash ? \"u\" : \"\\\\u\") +\n            (ch === 0x2028 ? \"2028\" : \"2029\")\n        );\n    } else if (ch === 10 || ch === 13) {\n        // \\n, \\r\n        return (previousIsBackslash ? \"\" : \"\\\\\") + (ch === 10 ? \"n\" : \"r\");\n    }\n    return String.fromCharCode(ch);\n}\n\nfunction generateRegExp(reg) {\n    var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n    result = reg.toString();\n\n    if (reg.source) {\n        // extract flag from toString result\n        match = result.match(/\\/([^/]*)$/);\n        if (!match) {\n            return result;\n        }\n\n        flags = match[1];\n        result = \"\";\n\n        characterInBrack = false;\n        previousIsBackslash = false;\n        for (i = 0, iz = reg.source.length; i < iz; ++i) {\n            ch = reg.source.charCodeAt(i);\n\n            if (!previousIsBackslash) {\n                if (characterInBrack) {\n                    if (ch === 93) {\n                        // ]\n                        characterInBrack = false;\n                    }\n                } else {\n                    if (ch === 47) {\n                        // /\n                        result += \"\\\\\";\n                    } else if (ch === 91) {\n                        // [\n                        characterInBrack = true;\n                    }\n                }\n                result += escapeRegExpCharacter(ch, previousIsBackslash);\n                previousIsBackslash = ch === 92; // \\\n            } else {\n                // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                result += escapeRegExpCharacter(ch, previousIsBackslash);\n                // prevent like /\\\\[/]/\n                previousIsBackslash = false;\n            }\n        }\n\n        return \"/\" + result + \"/\" + flags;\n    }\n\n    return result;\n}\n\nfunction escapeAllowedCharacter(code, next) {\n    var hex;\n\n    if (code === 0x08 /* \\b */) {\n        return \"\\\\b\";\n    }\n\n    if (code === 0x0c /* \\f */) {\n        return \"\\\\f\";\n    }\n\n    if (code === 0x09 /* \\t */) {\n        return \"\\\\t\";\n    }\n\n    hex = code.toString(16).toUpperCase();\n    if (json || code > 0xff) {\n        return \"\\\\u\" + \"0000\".slice(hex.length) + hex;\n    } else if (code === 0x0000 && !esutilscode.isDecimalDigit(next)) {\n        return \"\\\\0\";\n    } else if (code === 0x000b /* \\v */) {\n        // '\\v'\n        return \"\\\\x0B\";\n    } else {\n        return \"\\\\x\" + \"00\".slice(hex.length) + hex;\n    }\n}\n\nfunction escapeDisallowedCharacter(code) {\n    if (code === 0x5c /* \\ */) {\n        return \"\\\\\\\\\";\n    }\n\n    if (code === 0x0a /* \\n */) {\n        return \"\\\\n\";\n    }\n\n    if (code === 0x0d /* \\r */) {\n        return \"\\\\r\";\n    }\n\n    if (code === 0x2028) {\n        return \"\\\\u2028\";\n    }\n\n    if (code === 0x2029) {\n        return \"\\\\u2029\";\n    }\n\n    throw new Error(\"Incorrectly classified character\");\n}\n\nfunction escapeDirective(str) {\n    var i, iz, code, quote;\n\n    quote = quotes === \"double\" ? '\"' : \"'\";\n    for (i = 0, iz = str.length; i < iz; ++i) {\n        code = str.charCodeAt(i);\n        if (code === 0x27 /* ' */) {\n            quote = '\"';\n            break;\n        } else if (code === 0x22 /* \" */) {\n            quote = \"'\";\n            break;\n        } else if (code === 0x5c /* \\ */) {\n            ++i;\n        }\n    }\n\n    return quote + str + quote;\n}\n\nfunction escapeString(str) {\n    var result = \"\",\n        i,\n        len,\n        code,\n        singleQuotes = 0,\n        doubleQuotes = 0,\n        single,\n        quote;\n\n    for (i = 0, len = str.length; i < len; ++i) {\n        code = str.charCodeAt(i);\n        if (code === 0x27 /* ' */) {\n            ++singleQuotes;\n        } else if (code === 0x22 /* \" */) {\n            ++doubleQuotes;\n        } else if (code === 0x2f /* / */ && json) {\n            result += \"\\\\\";\n        } else if (\n            esutilscode.isLineTerminator(code) ||\n            code === 0x5c /* \\ */\n        ) {\n            result += escapeDisallowedCharacter(code);\n            continue;\n        } else if (\n            !esutilscode.isIdentifierPartES5(code) &&\n            ((json && code < 0x20) /* SP */ ||\n                (!json &&\n                    !escapeless &&\n                    (code < 0x20 /* SP */ || code > 0x7e))) /* ~ */\n        ) {\n            result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n            continue;\n        }\n        result += String.fromCharCode(code);\n    }\n\n    single = !(\n        quotes === \"double\" ||\n        (quotes === \"auto\" && doubleQuotes < singleQuotes)\n    );\n    quote = single ? \"'\" : '\"';\n\n    if (!(single ? singleQuotes : doubleQuotes)) {\n        return quote + result + quote;\n    }\n\n    str = result;\n    result = quote;\n\n    for (i = 0, len = str.length; i < len; ++i) {\n        code = str.charCodeAt(i);\n        if (\n            (code === 0x27 /* ' */ && single) ||\n            (code === 0x22 /* \" */ && !single)\n        ) {\n            result += \"\\\\\";\n        }\n        result += String.fromCharCode(code);\n    }\n\n    return result + quote;\n}\n\n/**\n * flatten an array to a string, where the array can contain\n * either strings or nested arrays\n */\nfunction flattenToString(arr) {\n    var i,\n        iz,\n        elem,\n        result = \"\";\n    for (i = 0, iz = arr.length; i < iz; ++i) {\n        elem = arr[i];\n        result += Array.isArray(elem) ? flattenToString(elem) : elem;\n    }\n    return result;\n}\n\n/**\n * convert generated to a SourceNode when source maps are enabled.\n */\nfunction toSourceNodeWhenNeeded(generated, node) {\n    if (!sourceMap) {\n        // with no source maps, generated is either an\n        // array or a string.  if an array, flatten it.\n        // if a string, just return it\n        if (Array.isArray(generated)) {\n            return flattenToString(generated);\n        } else {\n            return generated;\n        }\n    }\n    if (node == null) {\n        if (generated instanceof SourceNode) {\n            return generated;\n        } else {\n            node = {};\n        }\n    }\n    if (node.loc == null) {\n        return new SourceNode(\n            null,\n            null,\n            sourceMap,\n            generated,\n            node.name || null\n        );\n    }\n    return new SourceNode(\n        node.loc.start.line,\n        node.loc.start.column,\n        sourceMap === true ? node.loc.source || null : sourceMap,\n        generated,\n        node.name || null\n    );\n}\n\nfunction noEmptySpace() {\n    return space ? space : \" \";\n}\n\nfunction join(left, right) {\n    var leftSource, rightSource, leftCharCode, rightCharCode;\n\n    leftSource = toSourceNodeWhenNeeded(left).toString();\n    if (leftSource.length === 0) {\n        return [right];\n    }\n\n    rightSource = toSourceNodeWhenNeeded(right).toString();\n    if (rightSource.length === 0) {\n        return [left];\n    }\n\n    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n    rightCharCode = rightSource.charCodeAt(0);\n\n    if (\n        ((leftCharCode === 0x2b /* + */ || leftCharCode === 0x2d) /* - */ &&\n            leftCharCode === rightCharCode) ||\n        (esutilscode.isIdentifierPartES5(leftCharCode) &&\n            esutilscode.isIdentifierPartES5(rightCharCode)) ||\n        (leftCharCode === 0x2f /* / */ && rightCharCode === 0x69) /* i */\n    ) {\n        // infix word operators all start with `i`\n        return [left, noEmptySpace(), right];\n    } else if (\n        esutilscode.isWhiteSpace(leftCharCode) ||\n        esutilscode.isLineTerminator(leftCharCode) ||\n        esutilscode.isWhiteSpace(rightCharCode) ||\n        esutilscode.isLineTerminator(rightCharCode)\n    ) {\n        return [left, right];\n    }\n    return [left, space, right];\n}\n\nfunction addIndent(stmt) {\n    return [base, stmt];\n}\n\nfunction withIndent(fn) {\n    var previousBase;\n    previousBase = base;\n    base += indent;\n    fn(base);\n    base = previousBase;\n}\n\nfunction calculateSpaces(str) {\n    var i;\n    for (i = str.length - 1; i >= 0; --i) {\n        if (esutilscode.isLineTerminator(str.charCodeAt(i))) {\n            break;\n        }\n    }\n    return str.length - 1 - i;\n}\n\nfunction adjustMultilineComment(value, specialBase) {\n    var array, i, len, line, j, spaces, previousBase, sn;\n\n    array = value.split(/\\r\\n|[\\r\\n]/);\n    spaces = Number.MAX_VALUE;\n\n    // first line doesn't have indentation\n    for (i = 1, len = array.length; i < len; ++i) {\n        line = array[i];\n        j = 0;\n        while (\n            j < line.length &&\n            esutilscode.isWhiteSpace(line.charCodeAt(j))\n        ) {\n            ++j;\n        }\n        if (spaces > j) {\n            spaces = j;\n        }\n    }\n\n    if (typeof specialBase !== \"undefined\") {\n        // pattern like\n        // {\n        //   var t = 20;  /*\n        //                 * this is comment\n        //                 */\n        // }\n        previousBase = base;\n        if (array[1][spaces] === \"*\") {\n            specialBase += \" \";\n        }\n        base = specialBase;\n    } else {\n        if (spaces & 1) {\n            // /*\n            //  *\n            //  */\n            // If spaces are odd number, above pattern is considered.\n            // We waste 1 space.\n            --spaces;\n        }\n        previousBase = base;\n    }\n\n    for (i = 1, len = array.length; i < len; ++i) {\n        sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\n        array[i] = sourceMap ? sn.join(\"\") : sn;\n    }\n\n    base = previousBase;\n\n    return array.join(\"\\n\");\n}\n\nfunction generateComment(comment, specialBase) {\n    if (comment.type === \"Line\") {\n        if (endsWithLineTerminator(comment.value)) {\n            return \"//\" + comment.value;\n        } else {\n            // Always use LineTerminator\n            var result = \"//\" + comment.value;\n            if (!preserveBlankLines) {\n                result += \"\\n\";\n            }\n            return result;\n        }\n    }\n    if (\n        extra.format.indent.adjustMultilineComment &&\n        /[\\n\\r]/.test(comment.value)\n    ) {\n        return adjustMultilineComment(\"/*\" + comment.value + \"*/\", specialBase);\n    }\n    return \"/*\" + comment.value + \"*/\";\n}\n\nfunction addComments(stmt, result) {\n    var i,\n        len,\n        comment,\n        save,\n        tailingToStatement,\n        specialBase,\n        fragment,\n        extRange,\n        range,\n        prevRange,\n        prefix,\n        infix,\n        suffix,\n        count;\n\n    if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n        save = result;\n\n        if (preserveBlankLines) {\n            comment = stmt.leadingComments[0];\n            result = [];\n\n            extRange = comment.extendedRange;\n            range = comment.range;\n\n            prefix = sourceCode.substring(extRange[0], range[0]);\n            count = (prefix.match(/\\n/g) || []).length;\n            if (count > 0) {\n                result.push(stringRepeat(\"\\n\", count));\n                result.push(addIndent(generateComment(comment)));\n            } else {\n                result.push(prefix);\n                result.push(generateComment(comment));\n            }\n\n            prevRange = range;\n\n            for (i = 1, len = stmt.leadingComments.length; i < len; i++) {\n                comment = stmt.leadingComments[i];\n                range = comment.range;\n\n                infix = sourceCode.substring(prevRange[1], range[0]);\n                count = (infix.match(/\\n/g) || []).length;\n                result.push(stringRepeat(\"\\n\", count));\n                result.push(addIndent(generateComment(comment)));\n\n                prevRange = range;\n            }\n\n            suffix = sourceCode.substring(range[1], extRange[1]);\n            count = (suffix.match(/\\n/g) || []).length;\n            result.push(stringRepeat(\"\\n\", count));\n        } else {\n            comment = stmt.leadingComments[0];\n            result = [];\n            if (\n                safeConcatenation &&\n                stmt.type === Syntax.Program &&\n                stmt.body.length === 0\n            ) {\n                result.push(\"\\n\");\n            }\n            result.push(generateComment(comment));\n            if (\n                !endsWithLineTerminator(\n                    toSourceNodeWhenNeeded(result).toString()\n                )\n            ) {\n                result.push(\"\\n\");\n            }\n\n            for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {\n                comment = stmt.leadingComments[i];\n                fragment = [generateComment(comment)];\n                if (\n                    !endsWithLineTerminator(\n                        toSourceNodeWhenNeeded(fragment).toString()\n                    )\n                ) {\n                    fragment.push(\"\\n\");\n                }\n                result.push(addIndent(fragment));\n            }\n        }\n\n        result.push(addIndent(save));\n    }\n\n    if (stmt.trailingComments) {\n        if (preserveBlankLines) {\n            comment = stmt.trailingComments[0];\n            extRange = comment.extendedRange;\n            range = comment.range;\n\n            prefix = sourceCode.substring(extRange[0], range[0]);\n            count = (prefix.match(/\\n/g) || []).length;\n\n            if (count > 0) {\n                result.push(stringRepeat(\"\\n\", count));\n                result.push(addIndent(generateComment(comment)));\n            } else {\n                result.push(prefix);\n                result.push(generateComment(comment));\n            }\n        } else {\n            tailingToStatement = !endsWithLineTerminator(\n                toSourceNodeWhenNeeded(result).toString()\n            );\n            specialBase = stringRepeat(\n                \" \",\n                calculateSpaces(\n                    toSourceNodeWhenNeeded([base, result, indent]).toString()\n                )\n            );\n            for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {\n                comment = stmt.trailingComments[i];\n                if (tailingToStatement) {\n                    // We assume target like following script\n                    //\n                    // var t = 20;  /**\n                    //               * This is comment of t\n                    //               */\n                    if (i === 0) {\n                        // first case\n                        result = [result, indent];\n                    } else {\n                        result = [result, specialBase];\n                    }\n                    result.push(generateComment(comment, specialBase));\n                } else {\n                    result = [result, addIndent(generateComment(comment))];\n                }\n                if (\n                    i !== len - 1 &&\n                    !endsWithLineTerminator(\n                        toSourceNodeWhenNeeded(result).toString()\n                    )\n                ) {\n                    result = [result, \"\\n\"];\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction generateBlankLines(start, end, result) {\n    var j,\n        newlineCount = 0;\n\n    for (j = start; j < end; j++) {\n        if (sourceCode[j] === \"\\n\") {\n            newlineCount++;\n        }\n    }\n\n    for (j = 1; j < newlineCount; j++) {\n        result.push(newline);\n    }\n}\n\nfunction parenthesize(text, current, should) {\n    if (current < should) {\n        return [\"(\", text, \")\"];\n    }\n    return text;\n}\n\nfunction generateVerbatimString(string) {\n    var i, iz, result;\n    result = string.split(/\\r\\n|\\n/);\n    for (i = 1, iz = result.length; i < iz; i++) {\n        result[i] = newline + base + result[i];\n    }\n    return result;\n}\n\nfunction generateVerbatim(expr, precedence) {\n    var verbatim, result, prec;\n    verbatim = expr[extra.verbatim];\n\n    if (typeof verbatim === \"string\") {\n        result = parenthesize(\n            generateVerbatimString(verbatim),\n            Precedence.Sequence,\n            precedence\n        );\n    } else {\n        // verbatim is object\n        result = generateVerbatimString(verbatim.content);\n        prec =\n            verbatim.precedence != null\n                ? verbatim.precedence\n                : Precedence.Sequence;\n        result = parenthesize(result, prec, precedence);\n    }\n\n    return toSourceNodeWhenNeeded(result, expr);\n}\n\nfunction CodeGenerator() {}\n\n// Helpers.\n\nCodeGenerator.prototype.maybeBlock = function (stmt, flags) {\n    var result,\n        noLeadingComment,\n        that = this;\n\n    noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n    if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n        return [space, this.generateStatement(stmt, flags)];\n    }\n\n    if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n        return \";\";\n    }\n\n    withIndent(function () {\n        result = [newline, addIndent(that.generateStatement(stmt, flags))];\n    });\n\n    return result;\n};\n\nCodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {\n    var ends = endsWithLineTerminator(\n        toSourceNodeWhenNeeded(result).toString()\n    );\n    if (\n        stmt.type === Syntax.BlockStatement &&\n        (!extra.comment || !stmt.leadingComments) &&\n        !ends\n    ) {\n        return [result, space];\n    }\n    if (ends) {\n        return [result, base];\n    }\n    return [result, newline, base];\n};\n\nfunction generateIdentifier(node) {\n    return toSourceNodeWhenNeeded(node.name, node);\n}\n\nfunction generateAsyncPrefix(node, spaceRequired) {\n    return node.async ? \"async\" + (spaceRequired ? noEmptySpace() : space) : \"\";\n}\n\nfunction generateStarSuffix(node) {\n    var isGenerator = node.generator && !extra.moz.starlessGenerator;\n    return isGenerator ? \"*\" + space : \"\";\n}\n\nfunction generateMethodPrefix(prop) {\n    var func = prop.value,\n        prefix = \"\";\n    if (func.async) {\n        prefix += generateAsyncPrefix(func, !prop.computed);\n    }\n    if (func.generator) {\n        // avoid space before method name\n        prefix += generateStarSuffix(func) ? \"*\" : \"\";\n    }\n    return prefix;\n}\n\nCodeGenerator.prototype.generatePattern = function (node, precedence, flags) {\n    if (node.type === Syntax.Identifier) {\n        return generateIdentifier(node);\n    }\n    return this.generateExpression(node, precedence, flags);\n};\n\nCodeGenerator.prototype.generateFunctionParams = function (node) {\n    var i, iz, result, hasDefault;\n\n    hasDefault = false;\n\n    if (\n        node.type === Syntax.ArrowFunctionExpression &&\n        !node.rest &&\n        (!node.defaults || node.defaults.length === 0) &&\n        node.params.length === 1 &&\n        node.params[0].type === Syntax.Identifier\n    ) {\n        // arg => { } case\n        result = [\n            generateAsyncPrefix(node, true),\n            generateIdentifier(node.params[0]),\n        ];\n    } else {\n        result =\n            node.type === Syntax.ArrowFunctionExpression\n                ? [generateAsyncPrefix(node, false)]\n                : [];\n        result.push(\"(\");\n        if (node.defaults) {\n            hasDefault = true;\n        }\n        for (i = 0, iz = node.params.length; i < iz; ++i) {\n            if (hasDefault && node.defaults[i]) {\n                // Handle default values.\n                result.push(\n                    this.generateAssignment(\n                        node.params[i],\n                        node.defaults[i],\n                        \"=\",\n                        Precedence.Assignment,\n                        E_TTT\n                    )\n                );\n            } else {\n                result.push(\n                    this.generatePattern(\n                        node.params[i],\n                        Precedence.Assignment,\n                        E_TTT\n                    )\n                );\n            }\n            if (i + 1 < iz) {\n                result.push(\",\" + space);\n            }\n        }\n\n        if (node.rest) {\n            if (node.params.length) {\n                result.push(\",\" + space);\n            }\n            result.push(\"...\");\n            result.push(generateIdentifier(node.rest));\n        }\n\n        result.push(\")\");\n    }\n\n    return result;\n};\n\nCodeGenerator.prototype.generateFunctionBody = function (node) {\n    var result, expr;\n\n    result = this.generateFunctionParams(node);\n\n    if (node.type === Syntax.ArrowFunctionExpression) {\n        result.push(space);\n        result.push(\"=>\");\n    }\n\n    if (node.expression) {\n        result.push(space);\n        expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);\n        if (expr.toString().charAt(0) === \"{\") {\n            expr = [\"(\", expr, \")\"];\n        }\n        result.push(expr);\n    } else {\n        result.push(this.maybeBlock(node.body, S_TTFF));\n    }\n\n    return result;\n};\n\nCodeGenerator.prototype.generateIterationForStatement = function (\n    operator,\n    stmt,\n    flags\n) {\n    var result = [\"for\" + space + (stmt.await ? \"await\" + space : \"\") + \"(\"],\n        that = this;\n    withIndent(function () {\n        if (stmt.left.type === Syntax.VariableDeclaration) {\n            withIndent(function () {\n                result.push(stmt.left.kind + noEmptySpace());\n                result.push(\n                    that.generateStatement(stmt.left.declarations[0], S_FFFF)\n                );\n            });\n        } else {\n            result.push(\n                that.generateExpression(stmt.left, Precedence.Call, E_TTT)\n            );\n        }\n\n        result = join(result, operator);\n        result = [\n            join(\n                result,\n                that.generateExpression(\n                    stmt.right,\n                    Precedence.Assignment,\n                    E_TTT\n                )\n            ),\n            \")\",\n        ];\n    });\n    result.push(this.maybeBlock(stmt.body, flags));\n    return result;\n};\n\nCodeGenerator.prototype.generatePropertyKey = function (expr, computed) {\n    var result = [];\n\n    if (computed) {\n        result.push(\"[\");\n    }\n\n    result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));\n\n    if (computed) {\n        result.push(\"]\");\n    }\n\n    return result;\n};\n\nCodeGenerator.prototype.generateAssignment = function (\n    left,\n    right,\n    operator,\n    precedence,\n    flags\n) {\n    if (Precedence.Assignment < precedence) {\n        flags |= F_ALLOW_IN;\n    }\n\n    return parenthesize(\n        [\n            this.generateExpression(left, Precedence.Call, flags),\n            space + operator + space,\n            this.generateExpression(right, Precedence.Assignment, flags),\n        ],\n        Precedence.Assignment,\n        precedence\n    );\n};\n\nCodeGenerator.prototype.semicolon = function (flags) {\n    if (!semicolons && flags & F_SEMICOLON_OPT) {\n        return \"\";\n    }\n    return \";\";\n};\n\n// Statements.\n\nCodeGenerator.Statement = {\n    BlockStatement: function (stmt, flags) {\n        var range,\n            content,\n            result = [\"{\", newline],\n            that = this;\n\n        withIndent(function () {\n            // handle functions without any code\n            if (stmt.body.length === 0 && preserveBlankLines) {\n                range = stmt.range;\n                if (range[1] - range[0] > 2) {\n                    content = sourceCode.substring(range[0] + 1, range[1] - 1);\n                    if (content[0] === \"\\n\") {\n                        result = [\"{\"];\n                    }\n                    result.push(content);\n                }\n            }\n\n            var i, iz, fragment, bodyFlags;\n            bodyFlags = S_TFFF;\n            if (flags & F_FUNC_BODY) {\n                bodyFlags |= F_DIRECTIVE_CTX;\n            }\n\n            for (i = 0, iz = stmt.body.length; i < iz; ++i) {\n                if (preserveBlankLines) {\n                    // handle spaces before the first line\n                    if (i === 0) {\n                        if (stmt.body[0].leadingComments) {\n                            range =\n                                stmt.body[0].leadingComments[0].extendedRange;\n                            content = sourceCode.substring(range[0], range[1]);\n                            if (content[0] === \"\\n\") {\n                                result = [\"{\"];\n                            }\n                        }\n                        if (!stmt.body[0].leadingComments) {\n                            generateBlankLines(\n                                stmt.range[0],\n                                stmt.body[0].range[0],\n                                result\n                            );\n                        }\n                    }\n\n                    // handle spaces between lines\n                    if (i > 0) {\n                        if (\n                            !stmt.body[i - 1].trailingComments &&\n                            !stmt.body[i].leadingComments\n                        ) {\n                            generateBlankLines(\n                                stmt.body[i - 1].range[1],\n                                stmt.body[i].range[0],\n                                result\n                            );\n                        }\n                    }\n                }\n\n                if (i === iz - 1) {\n                    bodyFlags |= F_SEMICOLON_OPT;\n                }\n\n                if (stmt.body[i].leadingComments && preserveBlankLines) {\n                    fragment = that.generateStatement(stmt.body[i], bodyFlags);\n                } else {\n                    fragment = addIndent(\n                        that.generateStatement(stmt.body[i], bodyFlags)\n                    );\n                }\n\n                result.push(fragment);\n                if (\n                    !endsWithLineTerminator(\n                        toSourceNodeWhenNeeded(fragment).toString()\n                    )\n                ) {\n                    if (preserveBlankLines && i < iz - 1) {\n                        // don't add a new line if there are leading coments\n                        // in the next statement\n                        if (!stmt.body[i + 1].leadingComments) {\n                            result.push(newline);\n                        }\n                    } else {\n                        result.push(newline);\n                    }\n                }\n\n                if (preserveBlankLines) {\n                    // handle spaces after the last line\n                    if (i === iz - 1) {\n                        if (!stmt.body[i].trailingComments) {\n                            generateBlankLines(\n                                stmt.body[i].range[1],\n                                stmt.range[1],\n                                result\n                            );\n                        }\n                    }\n                }\n            }\n        });\n\n        result.push(addIndent(\"}\"));\n        return result;\n    },\n\n    BreakStatement: function (stmt, flags) {\n        if (stmt.label) {\n            return \"break \" + stmt.label.name + this.semicolon(flags);\n        }\n        return \"break\" + this.semicolon(flags);\n    },\n\n    ContinueStatement: function (stmt, flags) {\n        if (stmt.label) {\n            return \"continue \" + stmt.label.name + this.semicolon(flags);\n        }\n        return \"continue\" + this.semicolon(flags);\n    },\n\n    ClassBody: function (stmt) {\n        var result = [\"{\", newline],\n            that = this;\n\n        withIndent(function (indent) {\n            var i, iz;\n\n            for (i = 0, iz = stmt.body.length; i < iz; ++i) {\n                result.push(indent);\n                result.push(\n                    that.generateExpression(\n                        stmt.body[i],\n                        Precedence.Sequence,\n                        E_TTT\n                    )\n                );\n                if (i + 1 < iz) {\n                    result.push(newline);\n                }\n            }\n        });\n\n        if (\n            !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())\n        ) {\n            result.push(newline);\n        }\n        result.push(base);\n        result.push(\"}\");\n        return result;\n    },\n\n    ClassDeclaration: function (stmt) {\n        var result, fragment;\n        result = [\"class\"];\n        if (stmt.id) {\n            result = join(\n                result,\n                this.generateExpression(stmt.id, Precedence.Sequence, E_TTT)\n            );\n        }\n        if (stmt.superClass) {\n            fragment = join(\n                \"extends\",\n                this.generateExpression(\n                    stmt.superClass,\n                    Precedence.Assignment,\n                    E_TTT\n                )\n            );\n            result = join(result, fragment);\n        }\n        result.push(space);\n        result.push(this.generateStatement(stmt.body, S_TFFT));\n        return result;\n    },\n\n    DirectiveStatement: function (stmt, flags) {\n        if (extra.raw && stmt.raw) {\n            return stmt.raw + this.semicolon(flags);\n        }\n        return escapeDirective(stmt.directive) + this.semicolon(flags);\n    },\n\n    DoWhileStatement: function (stmt, flags) {\n        // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n        var result = join(\"do\", this.maybeBlock(stmt.body, S_TFFF));\n        result = this.maybeBlockSuffix(stmt.body, result);\n        return join(result, [\n            \"while\" + space + \"(\",\n            this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n            \")\" + this.semicolon(flags),\n        ]);\n    },\n\n    CatchClause: function (stmt) {\n        var result,\n            that = this;\n        withIndent(function () {\n            var guard;\n\n            result = [\n                \"catch\" + space + \"(\",\n                that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),\n                \")\",\n            ];\n\n            if (stmt.guard) {\n                guard = that.generateExpression(\n                    stmt.guard,\n                    Precedence.Sequence,\n                    E_TTT\n                );\n                result.splice(2, 0, \" if \", guard);\n            }\n        });\n        result.push(this.maybeBlock(stmt.body, S_TFFF));\n        return result;\n    },\n\n    DebuggerStatement: function (stmt, flags) {\n        return \"debugger\" + this.semicolon(flags);\n    },\n\n    EmptyStatement: function () {\n        return \";\";\n    },\n\n    ExportDefaultDeclaration: function (stmt, flags) {\n        var result = [\"export\"],\n            bodyFlags;\n\n        bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;\n\n        // export default HoistableDeclaration[Default]\n        // export default AssignmentExpression[In] ;\n        result = join(result, \"default\");\n        if (isStatement(stmt.declaration)) {\n            result = join(\n                result,\n                this.generateStatement(stmt.declaration, bodyFlags)\n            );\n        } else {\n            result = join(\n                result,\n                this.generateExpression(\n                    stmt.declaration,\n                    Precedence.Assignment,\n                    E_TTT\n                ) + this.semicolon(flags)\n            );\n        }\n        return result;\n    },\n\n    ExportNamedDeclaration: function (stmt, flags) {\n        var result = [\"export\"],\n            bodyFlags,\n            that = this;\n\n        bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;\n\n        // export VariableStatement\n        // export Declaration[Default]\n        if (stmt.declaration) {\n            return join(\n                result,\n                this.generateStatement(stmt.declaration, bodyFlags)\n            );\n        }\n\n        // export ExportClause[NoReference] FromClause ;\n        // export ExportClause ;\n        if (stmt.specifiers) {\n            if (stmt.specifiers.length === 0) {\n                result = join(result, \"{\" + space + \"}\");\n            } else if (\n                stmt.specifiers[0].type === Syntax.ExportBatchSpecifier\n            ) {\n                result = join(\n                    result,\n                    this.generateExpression(\n                        stmt.specifiers[0],\n                        Precedence.Sequence,\n                        E_TTT\n                    )\n                );\n            } else {\n                result = join(result, \"{\");\n                withIndent(function (indent) {\n                    var i, iz;\n                    result.push(newline);\n                    for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {\n                        result.push(indent);\n                        result.push(\n                            that.generateExpression(\n                                stmt.specifiers[i],\n                                Precedence.Sequence,\n                                E_TTT\n                            )\n                        );\n                        if (i + 1 < iz) {\n                            result.push(\",\" + newline);\n                        }\n                    }\n                });\n                if (\n                    !endsWithLineTerminator(\n                        toSourceNodeWhenNeeded(result).toString()\n                    )\n                ) {\n                    result.push(newline);\n                }\n                result.push(base + \"}\");\n            }\n\n            if (stmt.source) {\n                result = join(result, [\n                    \"from\" + space,\n                    // ModuleSpecifier\n                    this.generateExpression(\n                        stmt.source,\n                        Precedence.Sequence,\n                        E_TTT\n                    ),\n                    this.semicolon(flags),\n                ]);\n            } else {\n                result.push(this.semicolon(flags));\n            }\n        }\n        return result;\n    },\n\n    ExportAllDeclaration: function (stmt, flags) {\n        // export * FromClause ;\n        return [\n            \"export\" + space,\n            \"*\" + space,\n            \"from\" + space,\n            // ModuleSpecifier\n            this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n            this.semicolon(flags),\n        ];\n    },\n\n    ExpressionStatement: function (stmt, flags) {\n        var result, fragment;\n\n        function isClassPrefixed(fragment) {\n            var code;\n            if (fragment.slice(0, 5) !== \"class\") {\n                return false;\n            }\n            code = fragment.charCodeAt(5);\n            return (\n                code === 0x7b /* '{' */ ||\n                esutilscode.isWhiteSpace(code) ||\n                esutilscode.isLineTerminator(code)\n            );\n        }\n\n        function isFunctionPrefixed(fragment) {\n            var code;\n            if (fragment.slice(0, 8) !== \"function\") {\n                return false;\n            }\n            code = fragment.charCodeAt(8);\n            return (\n                code === 0x28 /* '(' */ ||\n                esutilscode.isWhiteSpace(code) ||\n                code === 0x2a /* '*' */ ||\n                esutilscode.isLineTerminator(code)\n            );\n        }\n\n        function isAsyncPrefixed(fragment) {\n            var code, i, iz;\n            if (fragment.slice(0, 5) !== \"async\") {\n                return false;\n            }\n            if (!esutilscode.isWhiteSpace(fragment.charCodeAt(5))) {\n                return false;\n            }\n            for (i = 6, iz = fragment.length; i < iz; ++i) {\n                if (!esutilscode.isWhiteSpace(fragment.charCodeAt(i))) {\n                    break;\n                }\n            }\n            if (i === iz) {\n                return false;\n            }\n            if (fragment.slice(i, i + 8) !== \"function\") {\n                return false;\n            }\n            code = fragment.charCodeAt(i + 8);\n            return (\n                code === 0x28 /* '(' */ ||\n                esutilscode.isWhiteSpace(code) ||\n                code === 0x2a /* '*' */ ||\n                esutilscode.isLineTerminator(code)\n            );\n        }\n\n        result = [\n            this.generateExpression(\n                stmt.expression,\n                Precedence.Sequence,\n                E_TTT\n            ),\n        ];\n        // 12.4 '{', 'function', 'class' is not allowed in this position.\n        // wrap expression with parentheses\n        fragment = toSourceNodeWhenNeeded(result).toString();\n        if (\n            fragment.charCodeAt(0) === 0x7b /* '{' */ || // ObjectExpression\n            isClassPrefixed(fragment) ||\n            isFunctionPrefixed(fragment) ||\n            isAsyncPrefixed(fragment) ||\n            (directive &&\n                flags & F_DIRECTIVE_CTX &&\n                stmt.expression.type === Syntax.Literal &&\n                typeof stmt.expression.value === \"string\")\n        ) {\n            result = [\"(\", result, \")\" + this.semicolon(flags)];\n        } else {\n            result.push(this.semicolon(flags));\n        }\n        return result;\n    },\n\n    ImportDeclaration: function (stmt, flags) {\n        // ES6: 15.2.1 valid import declarations:\n        //     - import ImportClause FromClause ;\n        //     - import ModuleSpecifier ;\n        var result,\n            cursor,\n            that = this;\n\n        // If no ImportClause is present,\n        // this should be `import ModuleSpecifier` so skip `from`\n        // ModuleSpecifier is StringLiteral.\n        if (stmt.specifiers.length === 0) {\n            // import ModuleSpecifier ;\n            return [\n                \"import\",\n                space,\n                // ModuleSpecifier\n                this.generateExpression(\n                    stmt.source,\n                    Precedence.Sequence,\n                    E_TTT\n                ),\n                this.semicolon(flags),\n            ];\n        }\n\n        // import ImportClause FromClause ;\n        result = [\"import\"];\n        cursor = 0;\n\n        // ImportedBinding\n        if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {\n            result = join(result, [\n                this.generateExpression(\n                    stmt.specifiers[cursor],\n                    Precedence.Sequence,\n                    E_TTT\n                ),\n            ]);\n            ++cursor;\n        }\n\n        if (stmt.specifiers[cursor]) {\n            if (cursor !== 0) {\n                result.push(\",\");\n            }\n\n            if (\n                stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier\n            ) {\n                // NameSpaceImport\n                result = join(result, [\n                    space,\n                    this.generateExpression(\n                        stmt.specifiers[cursor],\n                        Precedence.Sequence,\n                        E_TTT\n                    ),\n                ]);\n            } else {\n                // NamedImports\n                result.push(space + \"{\");\n\n                if (stmt.specifiers.length - cursor === 1) {\n                    // import { ... } from \"...\";\n                    result.push(space);\n                    result.push(\n                        this.generateExpression(\n                            stmt.specifiers[cursor],\n                            Precedence.Sequence,\n                            E_TTT\n                        )\n                    );\n                    result.push(space + \"}\" + space);\n                } else {\n                    // import {\n                    //    ...,\n                    //    ...,\n                    // } from \"...\";\n                    withIndent(function (indent) {\n                        var i, iz;\n                        result.push(newline);\n                        for (\n                            i = cursor, iz = stmt.specifiers.length;\n                            i < iz;\n                            ++i\n                        ) {\n                            result.push(indent);\n                            result.push(\n                                that.generateExpression(\n                                    stmt.specifiers[i],\n                                    Precedence.Sequence,\n                                    E_TTT\n                                )\n                            );\n                            if (i + 1 < iz) {\n                                result.push(\",\" + newline);\n                            }\n                        }\n                    });\n                    if (\n                        !endsWithLineTerminator(\n                            toSourceNodeWhenNeeded(result).toString()\n                        )\n                    ) {\n                        result.push(newline);\n                    }\n                    result.push(base + \"}\" + space);\n                }\n            }\n        }\n\n        result = join(result, [\n            \"from\" + space,\n            // ModuleSpecifier\n            this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n            this.semicolon(flags),\n        ]);\n        return result;\n    },\n\n    VariableDeclarator: function (stmt, flags) {\n        var itemFlags = flags & F_ALLOW_IN ? E_TTT : E_FTT;\n        if (stmt.init) {\n            return [\n                this.generateExpression(\n                    stmt.id,\n                    Precedence.Assignment,\n                    itemFlags\n                ),\n                space,\n                \"=\",\n                space,\n                this.generateExpression(\n                    stmt.init,\n                    Precedence.Assignment,\n                    itemFlags\n                ),\n            ];\n        }\n        return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);\n    },\n\n    VariableDeclaration: function (stmt, flags) {\n        // VariableDeclarator is typed as Statement,\n        // but joined with comma (not LineTerminator).\n        // So if comment is attached to target node, we should specialize.\n        var result,\n            i,\n            iz,\n            node,\n            bodyFlags,\n            that = this;\n\n        result = [stmt.kind];\n\n        bodyFlags = flags & F_ALLOW_IN ? S_TFFF : S_FFFF;\n\n        function block() {\n            node = stmt.declarations[0];\n            if (extra.comment && node.leadingComments) {\n                result.push(\"\\n\");\n                result.push(addIndent(that.generateStatement(node, bodyFlags)));\n            } else {\n                result.push(noEmptySpace());\n                result.push(that.generateStatement(node, bodyFlags));\n            }\n\n            for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {\n                node = stmt.declarations[i];\n                if (extra.comment && node.leadingComments) {\n                    result.push(\",\" + newline);\n                    result.push(\n                        addIndent(that.generateStatement(node, bodyFlags))\n                    );\n                } else {\n                    result.push(\",\" + space);\n                    result.push(that.generateStatement(node, bodyFlags));\n                }\n            }\n        }\n\n        if (stmt.declarations.length > 1) {\n            withIndent(block);\n        } else {\n            block();\n        }\n\n        result.push(this.semicolon(flags));\n\n        return result;\n    },\n\n    ThrowStatement: function (stmt, flags) {\n        return [\n            join(\n                \"throw\",\n                this.generateExpression(\n                    stmt.argument,\n                    Precedence.Sequence,\n                    E_TTT\n                )\n            ),\n            this.semicolon(flags),\n        ];\n    },\n\n    TryStatement: function (stmt) {\n        var result, i, iz, guardedHandlers;\n\n        result = [\"try\", this.maybeBlock(stmt.block, S_TFFF)];\n        result = this.maybeBlockSuffix(stmt.block, result);\n\n        if (stmt.handlers) {\n            // old interface\n            for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {\n                result = join(\n                    result,\n                    this.generateStatement(stmt.handlers[i], S_TFFF)\n                );\n                if (stmt.finalizer || i + 1 !== iz) {\n                    result = this.maybeBlockSuffix(\n                        stmt.handlers[i].body,\n                        result\n                    );\n                }\n            }\n        } else {\n            guardedHandlers = stmt.guardedHandlers || [];\n\n            for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {\n                result = join(\n                    result,\n                    this.generateStatement(guardedHandlers[i], S_TFFF)\n                );\n                if (stmt.finalizer || i + 1 !== iz) {\n                    result = this.maybeBlockSuffix(\n                        guardedHandlers[i].body,\n                        result\n                    );\n                }\n            }\n\n            // new interface\n            if (stmt.handler) {\n                if (Array.isArray(stmt.handler)) {\n                    for (i = 0, iz = stmt.handler.length; i < iz; ++i) {\n                        result = join(\n                            result,\n                            this.generateStatement(stmt.handler[i], S_TFFF)\n                        );\n                        if (stmt.finalizer || i + 1 !== iz) {\n                            result = this.maybeBlockSuffix(\n                                stmt.handler[i].body,\n                                result\n                            );\n                        }\n                    }\n                } else {\n                    result = join(\n                        result,\n                        this.generateStatement(stmt.handler, S_TFFF)\n                    );\n                    if (stmt.finalizer) {\n                        result = this.maybeBlockSuffix(\n                            stmt.handler.body,\n                            result\n                        );\n                    }\n                }\n            }\n        }\n        if (stmt.finalizer) {\n            result = join(result, [\n                \"finally\",\n                this.maybeBlock(stmt.finalizer, S_TFFF),\n            ]);\n        }\n        return result;\n    },\n\n    SwitchStatement: function (stmt) {\n        var result,\n            fragment,\n            i,\n            iz,\n            bodyFlags,\n            that = this;\n        withIndent(function () {\n            result = [\n                \"switch\" + space + \"(\",\n                that.generateExpression(\n                    stmt.discriminant,\n                    Precedence.Sequence,\n                    E_TTT\n                ),\n                \")\" + space + \"{\" + newline,\n            ];\n        });\n        if (stmt.cases) {\n            bodyFlags = S_TFFF;\n            for (i = 0, iz = stmt.cases.length; i < iz; ++i) {\n                if (i === iz - 1) {\n                    bodyFlags |= F_SEMICOLON_OPT;\n                }\n                fragment = addIndent(\n                    this.generateStatement(stmt.cases[i], bodyFlags)\n                );\n                result.push(fragment);\n                if (\n                    !endsWithLineTerminator(\n                        toSourceNodeWhenNeeded(fragment).toString()\n                    )\n                ) {\n                    result.push(newline);\n                }\n            }\n        }\n        result.push(addIndent(\"}\"));\n        return result;\n    },\n\n    SwitchCase: function (stmt, flags) {\n        var result,\n            fragment,\n            i,\n            iz,\n            bodyFlags,\n            that = this;\n        withIndent(function () {\n            if (stmt.test) {\n                result = [\n                    join(\n                        \"case\",\n                        that.generateExpression(\n                            stmt.test,\n                            Precedence.Sequence,\n                            E_TTT\n                        )\n                    ),\n                    \":\",\n                ];\n            } else {\n                result = [\"default:\"];\n            }\n\n            i = 0;\n            iz = stmt.consequent.length;\n            if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {\n                fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);\n                result.push(fragment);\n                i = 1;\n            }\n\n            if (\n                i !== iz &&\n                !endsWithLineTerminator(\n                    toSourceNodeWhenNeeded(result).toString()\n                )\n            ) {\n                result.push(newline);\n            }\n\n            bodyFlags = S_TFFF;\n            for (; i < iz; ++i) {\n                if (i === iz - 1 && flags & F_SEMICOLON_OPT) {\n                    bodyFlags |= F_SEMICOLON_OPT;\n                }\n                fragment = addIndent(\n                    that.generateStatement(stmt.consequent[i], bodyFlags)\n                );\n                result.push(fragment);\n                if (\n                    i + 1 !== iz &&\n                    !endsWithLineTerminator(\n                        toSourceNodeWhenNeeded(fragment).toString()\n                    )\n                ) {\n                    result.push(newline);\n                }\n            }\n        });\n        return result;\n    },\n\n    IfStatement: function (stmt, flags) {\n        var result,\n            bodyFlags,\n            semicolonOptional,\n            that = this;\n        withIndent(function () {\n            result = [\n                \"if\" + space + \"(\",\n                that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                \")\",\n            ];\n        });\n        semicolonOptional = flags & F_SEMICOLON_OPT;\n        bodyFlags = S_TFFF;\n        if (semicolonOptional) {\n            bodyFlags |= F_SEMICOLON_OPT;\n        }\n        if (stmt.alternate) {\n            result.push(this.maybeBlock(stmt.consequent, S_TFFF));\n            result = this.maybeBlockSuffix(stmt.consequent, result);\n            if (stmt.alternate.type === Syntax.IfStatement) {\n                result = join(result, [\n                    \"else \",\n                    this.generateStatement(stmt.alternate, bodyFlags),\n                ]);\n            } else {\n                result = join(\n                    result,\n                    join(\"else\", this.maybeBlock(stmt.alternate, bodyFlags))\n                );\n            }\n        } else {\n            result.push(this.maybeBlock(stmt.consequent, bodyFlags));\n        }\n        return result;\n    },\n\n    ForStatement: function (stmt, flags) {\n        var result,\n            that = this;\n        withIndent(function () {\n            result = [\"for\" + space + \"(\"];\n            if (stmt.init) {\n                if (stmt.init.type === Syntax.VariableDeclaration) {\n                    result.push(that.generateStatement(stmt.init, S_FFFF));\n                } else {\n                    // F_ALLOW_IN becomes false.\n                    result.push(\n                        that.generateExpression(\n                            stmt.init,\n                            Precedence.Sequence,\n                            E_FTT\n                        )\n                    );\n                    result.push(\";\");\n                }\n            } else {\n                result.push(\";\");\n            }\n\n            if (stmt.test) {\n                result.push(space);\n                result.push(\n                    that.generateExpression(\n                        stmt.test,\n                        Precedence.Sequence,\n                        E_TTT\n                    )\n                );\n                result.push(\";\");\n            } else {\n                result.push(\";\");\n            }\n\n            if (stmt.update) {\n                result.push(space);\n                result.push(\n                    that.generateExpression(\n                        stmt.update,\n                        Precedence.Sequence,\n                        E_TTT\n                    )\n                );\n                result.push(\")\");\n            } else {\n                result.push(\")\");\n            }\n        });\n\n        result.push(\n            this.maybeBlock(\n                stmt.body,\n                flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF\n            )\n        );\n        return result;\n    },\n\n    ForInStatement: function (stmt, flags) {\n        return this.generateIterationForStatement(\n            \"in\",\n            stmt,\n            flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF\n        );\n    },\n\n    ForOfStatement: function (stmt, flags) {\n        return this.generateIterationForStatement(\n            \"of\",\n            stmt,\n            flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF\n        );\n    },\n\n    LabeledStatement: function (stmt, flags) {\n        return [\n            stmt.label.name + \":\",\n            this.maybeBlock(\n                stmt.body,\n                flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF\n            ),\n        ];\n    },\n\n    Program: function (stmt) {\n        var result, fragment, i, iz, bodyFlags;\n        iz = stmt.body.length;\n        result = [safeConcatenation && iz > 0 ? \"\\n\" : \"\"];\n        bodyFlags = S_TFTF;\n        for (i = 0; i < iz; ++i) {\n            if (!safeConcatenation && i === iz - 1) {\n                bodyFlags |= F_SEMICOLON_OPT;\n            }\n\n            if (preserveBlankLines) {\n                // handle spaces before the first line\n                if (i === 0) {\n                    if (!stmt.body[0].leadingComments) {\n                        generateBlankLines(\n                            stmt.range[0],\n                            stmt.body[i].range[0],\n                            result\n                        );\n                    }\n                }\n\n                // handle spaces between lines\n                if (i > 0) {\n                    if (\n                        !stmt.body[i - 1].trailingComments &&\n                        !stmt.body[i].leadingComments\n                    ) {\n                        generateBlankLines(\n                            stmt.body[i - 1].range[1],\n                            stmt.body[i].range[0],\n                            result\n                        );\n                    }\n                }\n            }\n\n            fragment = addIndent(\n                this.generateStatement(stmt.body[i], bodyFlags)\n            );\n            result.push(fragment);\n            if (\n                i + 1 < iz &&\n                !endsWithLineTerminator(\n                    toSourceNodeWhenNeeded(fragment).toString()\n                )\n            ) {\n                if (preserveBlankLines) {\n                    if (!stmt.body[i + 1].leadingComments) {\n                        result.push(newline);\n                    }\n                } else {\n                    result.push(newline);\n                }\n            }\n\n            if (preserveBlankLines) {\n                // handle spaces after the last line\n                if (i === iz - 1) {\n                    if (!stmt.body[i].trailingComments) {\n                        generateBlankLines(\n                            stmt.body[i].range[1],\n                            stmt.range[1],\n                            result\n                        );\n                    }\n                }\n            }\n        }\n        return result;\n    },\n\n    FunctionDeclaration: function (stmt) {\n        return [\n            generateAsyncPrefix(stmt, true),\n            \"function\",\n            generateStarSuffix(stmt) || noEmptySpace(),\n            stmt.id ? generateIdentifier(stmt.id) : \"\",\n            this.generateFunctionBody(stmt),\n        ];\n    },\n\n    ReturnStatement: function (stmt, flags) {\n        if (stmt.argument) {\n            return [\n                join(\n                    \"return\",\n                    this.generateExpression(\n                        stmt.argument,\n                        Precedence.Sequence,\n                        E_TTT\n                    )\n                ),\n                this.semicolon(flags),\n            ];\n        }\n        return [\"return\" + this.semicolon(flags)];\n    },\n\n    WhileStatement: function (stmt, flags) {\n        var result,\n            that = this;\n        withIndent(function () {\n            result = [\n                \"while\" + space + \"(\",\n                that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                \")\",\n            ];\n        });\n        result.push(\n            this.maybeBlock(\n                stmt.body,\n                flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF\n            )\n        );\n        return result;\n    },\n\n    WithStatement: function (stmt, flags) {\n        var result,\n            that = this;\n        withIndent(function () {\n            result = [\n                \"with\" + space + \"(\",\n                that.generateExpression(\n                    stmt.object,\n                    Precedence.Sequence,\n                    E_TTT\n                ),\n                \")\",\n            ];\n        });\n        result.push(\n            this.maybeBlock(\n                stmt.body,\n                flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF\n            )\n        );\n        return result;\n    },\n};\n\nmerge(CodeGenerator.prototype, CodeGenerator.Statement);\n\n// Expressions.\n\nCodeGenerator.Expression = {\n    SequenceExpression: function (expr, precedence, flags) {\n        var result, i, iz;\n        if (Precedence.Sequence < precedence) {\n            flags |= F_ALLOW_IN;\n        }\n        result = [];\n        for (i = 0, iz = expr.expressions.length; i < iz; ++i) {\n            result.push(\n                this.generateExpression(\n                    expr.expressions[i],\n                    Precedence.Assignment,\n                    flags\n                )\n            );\n            if (i + 1 < iz) {\n                result.push(\",\" + space);\n            }\n        }\n        return parenthesize(result, Precedence.Sequence, precedence);\n    },\n\n    AssignmentExpression: function (expr, precedence, flags) {\n        return this.generateAssignment(\n            expr.left,\n            expr.right,\n            expr.operator,\n            precedence,\n            flags\n        );\n    },\n\n    ArrowFunctionExpression: function (expr, precedence) {\n        return parenthesize(\n            this.generateFunctionBody(expr),\n            Precedence.ArrowFunction,\n            precedence\n        );\n    },\n\n    ConditionalExpression: function (expr, precedence, flags) {\n        if (Precedence.Conditional < precedence) {\n            flags |= F_ALLOW_IN;\n        }\n        return parenthesize(\n            [\n                this.generateExpression(expr.test, Precedence.LogicalOR, flags),\n                space + \"?\" + space,\n                this.generateExpression(\n                    expr.consequent,\n                    Precedence.Assignment,\n                    flags\n                ),\n                space + \":\" + space,\n                this.generateExpression(\n                    expr.alternate,\n                    Precedence.Assignment,\n                    flags\n                ),\n            ],\n            Precedence.Conditional,\n            precedence\n        );\n    },\n\n    LogicalExpression: function (expr, precedence, flags) {\n        return this.BinaryExpression(expr, precedence, flags);\n    },\n\n    BinaryExpression: function (expr, precedence, flags) {\n        var result, currentPrecedence, fragment, leftSource;\n        currentPrecedence = BinaryPrecedence[expr.operator];\n\n        if (currentPrecedence < precedence) {\n            flags |= F_ALLOW_IN;\n        }\n\n        fragment = this.generateExpression(expr.left, currentPrecedence, flags);\n\n        leftSource = fragment.toString();\n\n        if (\n            leftSource.charCodeAt(leftSource.length - 1) === 0x2f /* / */ &&\n            esutilscode.isIdentifierPartES5(expr.operator.charCodeAt(0))\n        ) {\n            result = [fragment, noEmptySpace(), expr.operator];\n        } else {\n            result = join(fragment, expr.operator);\n        }\n\n        fragment = this.generateExpression(\n            expr.right,\n            currentPrecedence + 1,\n            flags\n        );\n\n        if (\n            (expr.operator === \"/\" && fragment.toString().charAt(0) === \"/\") ||\n            (expr.operator.slice(-1) === \"<\" &&\n                fragment.toString().slice(0, 3) === \"!--\")\n        ) {\n            // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n            result.push(noEmptySpace());\n            result.push(fragment);\n        } else {\n            result = join(result, fragment);\n        }\n\n        if (expr.operator === \"in\" && !(flags & F_ALLOW_IN)) {\n            return [\"(\", result, \")\"];\n        }\n        return parenthesize(result, currentPrecedence, precedence);\n    },\n\n    CallExpression: function (expr, precedence, flags) {\n        var result, i, iz;\n        // F_ALLOW_UNPARATH_NEW becomes false.\n        result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];\n        result.push(\"(\");\n        for (i = 0, iz = expr[\"arguments\"].length; i < iz; ++i) {\n            result.push(\n                this.generateExpression(\n                    expr[\"arguments\"][i],\n                    Precedence.Assignment,\n                    E_TTT\n                )\n            );\n            if (i + 1 < iz) {\n                result.push(\",\" + space);\n            }\n        }\n        result.push(\")\");\n\n        if (!(flags & F_ALLOW_CALL)) {\n            return [\"(\", result, \")\"];\n        }\n        return parenthesize(result, Precedence.Call, precedence);\n    },\n\n    NewExpression: function (expr, precedence, flags) {\n        var result, length, i, iz, itemFlags;\n        length = expr[\"arguments\"].length;\n\n        // F_ALLOW_CALL becomes false.\n        // F_ALLOW_UNPARATH_NEW may become false.\n        itemFlags =\n            flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0\n                ? E_TFT\n                : E_TFF;\n\n        result = join(\n            \"new\",\n            this.generateExpression(expr.callee, Precedence.New, itemFlags)\n        );\n\n        if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {\n            result.push(\"(\");\n            for (i = 0, iz = length; i < iz; ++i) {\n                result.push(\n                    this.generateExpression(\n                        expr[\"arguments\"][i],\n                        Precedence.Assignment,\n                        E_TTT\n                    )\n                );\n                if (i + 1 < iz) {\n                    result.push(\",\" + space);\n                }\n            }\n            result.push(\")\");\n        }\n\n        return parenthesize(result, Precedence.New, precedence);\n    },\n\n    MemberExpression: function (expr, precedence, flags) {\n        var result, fragment;\n\n        // F_ALLOW_UNPARATH_NEW becomes false.\n        result = [\n            this.generateExpression(\n                expr.object,\n                Precedence.Call,\n                flags & F_ALLOW_CALL ? E_TTF : E_TFF\n            ),\n        ];\n\n        if (expr.computed) {\n            result.push(\"[\");\n            result.push(\n                this.generateExpression(\n                    expr.property,\n                    Precedence.Sequence,\n                    flags & F_ALLOW_CALL ? E_TTT : E_TFT\n                )\n            );\n            result.push(\"]\");\n        } else {\n            if (\n                expr.object.type === Syntax.Literal &&\n                typeof expr.object.value === \"number\"\n            ) {\n                fragment = toSourceNodeWhenNeeded(result).toString();\n                // When the following conditions are all true,\n                //   1. No floating point\n                //   2. Don't have exponents\n                //   3. The last character is a decimal digit\n                //   4. Not hexadecimal OR octal number literal\n                // we should add a floating point.\n                if (\n                    fragment.indexOf(\".\") < 0 &&\n                    !/[eExX]/.test(fragment) &&\n                    esutilscode.isDecimalDigit(\n                        fragment.charCodeAt(fragment.length - 1)\n                    ) &&\n                    !(fragment.length >= 2 && fragment.charCodeAt(0) === 48) // '0'\n                ) {\n                    result.push(\" \");\n                }\n            }\n            result.push(\".\");\n            result.push(generateIdentifier(expr.property));\n        }\n\n        return parenthesize(result, Precedence.Member, precedence);\n    },\n\n    MetaProperty: function (expr, precedence) {\n        var result;\n        result = [];\n        result.push(\n            typeof expr.meta === \"string\"\n                ? expr.meta\n                : generateIdentifier(expr.meta)\n        );\n        result.push(\".\");\n        result.push(\n            typeof expr.property === \"string\"\n                ? expr.property\n                : generateIdentifier(expr.property)\n        );\n        return parenthesize(result, Precedence.Member, precedence);\n    },\n\n    UnaryExpression: function (expr, precedence) {\n        var result, fragment, rightCharCode, leftSource, leftCharCode;\n        fragment = this.generateExpression(\n            expr.argument,\n            Precedence.Unary,\n            E_TTT\n        );\n\n        if (space === \"\") {\n            result = join(expr.operator, fragment);\n        } else {\n            result = [expr.operator];\n            if (expr.operator.length > 2) {\n                // delete, void, typeof\n                // get `typeof []`, not `typeof[]`\n                result = join(result, fragment);\n            } else {\n                // Prevent inserting spaces between operator and argument if it is unnecessary\n                // like, `!cond`\n                leftSource = toSourceNodeWhenNeeded(result).toString();\n                leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n                rightCharCode = fragment.toString().charCodeAt(0);\n\n                if (\n                    ((leftCharCode === 0x2b /* + */ ||\n                        leftCharCode === 0x2d) /* - */ &&\n                        leftCharCode === rightCharCode) ||\n                    (esutilscode.isIdentifierPartES5(leftCharCode) &&\n                        esutilscode.isIdentifierPartES5(rightCharCode))\n                ) {\n                    result.push(noEmptySpace());\n                    result.push(fragment);\n                } else {\n                    result.push(fragment);\n                }\n            }\n        }\n        return parenthesize(result, Precedence.Unary, precedence);\n    },\n\n    YieldExpression: function (expr, precedence) {\n        var result;\n        if (expr.delegate) {\n            result = \"yield*\";\n        } else {\n            result = \"yield\";\n        }\n        if (expr.argument) {\n            result = join(\n                result,\n                this.generateExpression(expr.argument, Precedence.Yield, E_TTT)\n            );\n        }\n        return parenthesize(result, Precedence.Yield, precedence);\n    },\n\n    AwaitExpression: function (expr, precedence) {\n        var result = join(\n            expr.all ? \"await*\" : \"await\",\n            this.generateExpression(expr.argument, Precedence.Await, E_TTT)\n        );\n        return parenthesize(result, Precedence.Await, precedence);\n    },\n\n    UpdateExpression: function (expr, precedence) {\n        if (expr.prefix) {\n            return parenthesize(\n                [\n                    expr.operator,\n                    this.generateExpression(\n                        expr.argument,\n                        Precedence.Unary,\n                        E_TTT\n                    ),\n                ],\n                Precedence.Unary,\n                precedence\n            );\n        }\n        return parenthesize(\n            [\n                this.generateExpression(\n                    expr.argument,\n                    Precedence.Postfix,\n                    E_TTT\n                ),\n                expr.operator,\n            ],\n            Precedence.Postfix,\n            precedence\n        );\n    },\n\n    FunctionExpression: function (expr) {\n        var result = [generateAsyncPrefix(expr, true), \"function\"];\n        if (expr.id) {\n            result.push(generateStarSuffix(expr) || noEmptySpace());\n            result.push(generateIdentifier(expr.id));\n        } else {\n            result.push(generateStarSuffix(expr) || space);\n        }\n        result.push(this.generateFunctionBody(expr));\n        return result;\n    },\n\n    ArrayPattern: function (expr, precedence, flags) {\n        return this.ArrayExpression(expr, precedence, flags, true);\n    },\n\n    ArrayExpression: function (expr, precedence, flags, isPattern) {\n        var result,\n            multiline,\n            that = this;\n        if (!expr.elements.length) {\n            return \"[]\";\n        }\n        multiline = isPattern ? false : expr.elements.length > 1;\n        result = [\"[\", multiline ? newline : \"\"];\n        withIndent(function (indent) {\n            var i, iz;\n            for (i = 0, iz = expr.elements.length; i < iz; ++i) {\n                if (!expr.elements[i]) {\n                    if (multiline) {\n                        result.push(indent);\n                    }\n                    if (i + 1 === iz) {\n                        result.push(\",\");\n                    }\n                } else {\n                    result.push(multiline ? indent : \"\");\n                    result.push(\n                        that.generateExpression(\n                            expr.elements[i],\n                            Precedence.Assignment,\n                            E_TTT\n                        )\n                    );\n                }\n                if (i + 1 < iz) {\n                    result.push(\",\" + (multiline ? newline : space));\n                }\n            }\n        });\n        if (\n            multiline &&\n            !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())\n        ) {\n            result.push(newline);\n        }\n        result.push(multiline ? base : \"\");\n        result.push(\"]\");\n        return result;\n    },\n\n    RestElement: function (expr) {\n        return \"...\" + this.generatePattern(expr.argument);\n    },\n\n    ClassExpression: function (expr) {\n        var result, fragment;\n        result = [\"class\"];\n        if (expr.id) {\n            result = join(\n                result,\n                this.generateExpression(expr.id, Precedence.Sequence, E_TTT)\n            );\n        }\n        if (expr.superClass) {\n            fragment = join(\n                \"extends\",\n                this.generateExpression(\n                    expr.superClass,\n                    Precedence.Assignment,\n                    E_TTT\n                )\n            );\n            result = join(result, fragment);\n        }\n        result.push(space);\n        result.push(this.generateStatement(expr.body, S_TFFT));\n        return result;\n    },\n\n    MethodDefinition: function (expr) {\n        var result, fragment;\n        if (expr[\"static\"]) {\n            result = [\"static\" + space];\n        } else {\n            result = [];\n        }\n        if (expr.kind === \"get\" || expr.kind === \"set\") {\n            fragment = [\n                join(\n                    expr.kind,\n                    this.generatePropertyKey(expr.key, expr.computed)\n                ),\n                this.generateFunctionBody(expr.value),\n            ];\n        } else {\n            fragment = [\n                generateMethodPrefix(expr),\n                this.generatePropertyKey(expr.key, expr.computed),\n                this.generateFunctionBody(expr.value),\n            ];\n        }\n        return join(result, fragment);\n    },\n\n    Property: function (expr) {\n        if (expr.kind === \"get\" || expr.kind === \"set\") {\n            return [\n                expr.kind,\n                noEmptySpace(),\n                this.generatePropertyKey(expr.key, expr.computed),\n                this.generateFunctionBody(expr.value),\n            ];\n        }\n\n        if (expr.shorthand) {\n            if (expr.value.type === \"AssignmentPattern\") {\n                return this.AssignmentPattern(\n                    expr.value,\n                    Precedence.Sequence,\n                    E_TTT\n                );\n            }\n            return this.generatePropertyKey(expr.key, expr.computed);\n        }\n\n        if (expr.method) {\n            return [\n                generateMethodPrefix(expr),\n                this.generatePropertyKey(expr.key, expr.computed),\n                this.generateFunctionBody(expr.value),\n            ];\n        }\n\n        return [\n            this.generatePropertyKey(expr.key, expr.computed),\n            \":\" + space,\n            this.generateExpression(expr.value, Precedence.Assignment, E_TTT),\n        ];\n    },\n\n    ObjectExpression: function (expr) {\n        var multiline,\n            result,\n            fragment,\n            that = this;\n\n        if (!expr.properties.length) {\n            return \"{}\";\n        }\n        multiline = expr.properties.length > 1;\n\n        withIndent(function () {\n            fragment = that.generateExpression(\n                expr.properties[0],\n                Precedence.Sequence,\n                E_TTT\n            );\n        });\n\n        if (!multiline) {\n            // issues 4\n            // Do not transform from\n            //   dejavu.Class.declare({\n            //       method2: function () {}\n            //   });\n            // to\n            //   dejavu.Class.declare({method2: function () {\n            //       }});\n            if (\n                !hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())\n            ) {\n                return [\"{\", space, fragment, space, \"}\"];\n            }\n        }\n\n        withIndent(function (indent) {\n            var i, iz;\n            result = [\"{\", newline, indent, fragment];\n\n            if (multiline) {\n                result.push(\",\" + newline);\n                for (i = 1, iz = expr.properties.length; i < iz; ++i) {\n                    result.push(indent);\n                    result.push(\n                        that.generateExpression(\n                            expr.properties[i],\n                            Precedence.Sequence,\n                            E_TTT\n                        )\n                    );\n                    if (i + 1 < iz) {\n                        result.push(\",\" + newline);\n                    }\n                }\n            }\n        });\n\n        if (\n            !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())\n        ) {\n            result.push(newline);\n        }\n        result.push(base);\n        result.push(\"}\");\n        return result;\n    },\n\n    AssignmentPattern: function (expr, precedence, flags) {\n        return this.generateAssignment(\n            expr.left,\n            expr.right,\n            \"=\",\n            precedence,\n            flags\n        );\n    },\n\n    ObjectPattern: function (expr) {\n        var result,\n            i,\n            iz,\n            multiline,\n            property,\n            that = this;\n        if (!expr.properties.length) {\n            return \"{}\";\n        }\n\n        multiline = false;\n        if (expr.properties.length === 1) {\n            property = expr.properties[0];\n            if (property.value.type !== Syntax.Identifier) {\n                multiline = true;\n            }\n        } else {\n            for (i = 0, iz = expr.properties.length; i < iz; ++i) {\n                property = expr.properties[i];\n                if (!property.shorthand) {\n                    multiline = true;\n                    break;\n                }\n            }\n        }\n        result = [\"{\", multiline ? newline : \"\"];\n\n        withIndent(function (indent) {\n            var i, iz;\n            for (i = 0, iz = expr.properties.length; i < iz; ++i) {\n                result.push(multiline ? indent : \"\");\n                result.push(\n                    that.generateExpression(\n                        expr.properties[i],\n                        Precedence.Sequence,\n                        E_TTT\n                    )\n                );\n                if (i + 1 < iz) {\n                    result.push(\",\" + (multiline ? newline : space));\n                }\n            }\n        });\n\n        if (\n            multiline &&\n            !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())\n        ) {\n            result.push(newline);\n        }\n        result.push(multiline ? base : \"\");\n        result.push(\"}\");\n        return result;\n    },\n\n    ThisExpression: function () {\n        return \"this\";\n    },\n\n    Super: function () {\n        return \"super\";\n    },\n\n    Identifier: function (expr) {\n        return generateIdentifier(expr);\n    },\n\n    ImportDefaultSpecifier: function (expr) {\n        return generateIdentifier(expr.id || expr.local);\n    },\n\n    ImportNamespaceSpecifier: function (expr) {\n        var result = [\"*\"];\n        var id = expr.id || expr.local;\n        if (id) {\n            result.push(space + \"as\" + noEmptySpace() + generateIdentifier(id));\n        }\n        return result;\n    },\n\n    ImportSpecifier: function (expr) {\n        var imported = expr.imported;\n        var result = [imported.name];\n        var local = expr.local;\n        if (local && local.name !== imported.name) {\n            result.push(\n                noEmptySpace() +\n                    \"as\" +\n                    noEmptySpace() +\n                    generateIdentifier(local)\n            );\n        }\n        return result;\n    },\n\n    ExportSpecifier: function (expr) {\n        var local = expr.local;\n        var result = [local.name];\n        var exported = expr.exported;\n        if (exported && exported.name !== local.name) {\n            result.push(\n                noEmptySpace() +\n                    \"as\" +\n                    noEmptySpace() +\n                    generateIdentifier(exported)\n            );\n        }\n        return result;\n    },\n\n    Literal: function (expr) {\n        var raw;\n        if (expr.hasOwnProperty(\"raw\") && parse && extra.raw) {\n            try {\n                raw = parse(expr.raw).body[0].expression;\n                if (raw.type === Syntax.Literal) {\n                    if (raw.value === expr.value) {\n                        return expr.raw;\n                    }\n                }\n            } catch (e) {\n                // not use raw property\n            }\n        }\n\n        if (expr.value === null) {\n            return \"null\";\n        }\n\n        if (typeof expr.value === \"string\") {\n            return escapeString(expr.value);\n        }\n\n        if (typeof expr.value === \"number\") {\n            return generateNumber(expr.value);\n        }\n\n        if (typeof expr.value === \"boolean\") {\n            return expr.value ? \"true\" : \"false\";\n        }\n\n        if (expr.regex) {\n            return \"/\" + expr.regex.pattern + \"/\" + expr.regex.flags;\n        }\n        return generateRegExp(expr.value);\n    },\n\n    GeneratorExpression: function (expr, precedence, flags) {\n        return this.ComprehensionExpression(expr, precedence, flags);\n    },\n\n    ComprehensionExpression: function (expr) {\n        // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n        // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\n\n        var result,\n            i,\n            iz,\n            fragment,\n            that = this;\n        result = expr.type === Syntax.GeneratorExpression ? [\"(\"] : [\"[\"];\n\n        if (extra.moz.comprehensionExpressionStartsWithAssignment) {\n            fragment = this.generateExpression(\n                expr.body,\n                Precedence.Assignment,\n                E_TTT\n            );\n            result.push(fragment);\n        }\n\n        if (expr.blocks) {\n            withIndent(function () {\n                for (i = 0, iz = expr.blocks.length; i < iz; ++i) {\n                    fragment = that.generateExpression(\n                        expr.blocks[i],\n                        Precedence.Sequence,\n                        E_TTT\n                    );\n                    if (\n                        i > 0 ||\n                        extra.moz.comprehensionExpressionStartsWithAssignment\n                    ) {\n                        result = join(result, fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            });\n        }\n\n        if (expr.filter) {\n            result = join(result, \"if\" + space);\n            fragment = this.generateExpression(\n                expr.filter,\n                Precedence.Sequence,\n                E_TTT\n            );\n            result = join(result, [\"(\", fragment, \")\"]);\n        }\n\n        if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\n            fragment = this.generateExpression(\n                expr.body,\n                Precedence.Assignment,\n                E_TTT\n            );\n\n            result = join(result, fragment);\n        }\n\n        result.push(expr.type === Syntax.GeneratorExpression ? \")\" : \"]\");\n        return result;\n    },\n\n    ComprehensionBlock: function (expr) {\n        var fragment;\n        if (expr.left.type === Syntax.VariableDeclaration) {\n            fragment = [\n                expr.left.kind,\n                noEmptySpace(),\n                this.generateStatement(expr.left.declarations[0], S_FFFF),\n            ];\n        } else {\n            fragment = this.generateExpression(\n                expr.left,\n                Precedence.Call,\n                E_TTT\n            );\n        }\n\n        fragment = join(fragment, expr.of ? \"of\" : \"in\");\n        fragment = join(\n            fragment,\n            this.generateExpression(expr.right, Precedence.Sequence, E_TTT)\n        );\n\n        return [\"for\" + space + \"(\", fragment, \")\"];\n    },\n\n    SpreadElement: function (expr) {\n        return [\n            \"...\",\n            this.generateExpression(\n                expr.argument,\n                Precedence.Assignment,\n                E_TTT\n            ),\n        ];\n    },\n\n    TaggedTemplateExpression: function (expr, precedence, flags) {\n        var itemFlags = E_TTF;\n        if (!(flags & F_ALLOW_CALL)) {\n            itemFlags = E_TFF;\n        }\n        var result = [\n            this.generateExpression(expr.tag, Precedence.Call, itemFlags),\n            this.generateExpression(expr.quasi, Precedence.Primary, E_FFT),\n        ];\n        return parenthesize(result, Precedence.TaggedTemplate, precedence);\n    },\n\n    TemplateElement: function (expr) {\n        // Don't use \"cooked\". Since tagged template can use raw template\n        // representation. So if we do so, it breaks the script semantics.\n        return expr.value.raw;\n    },\n\n    TemplateLiteral: function (expr) {\n        var result, i, iz;\n        result = [\"`\"];\n        for (i = 0, iz = expr.quasis.length; i < iz; ++i) {\n            result.push(\n                this.generateExpression(\n                    expr.quasis[i],\n                    Precedence.Primary,\n                    E_TTT\n                )\n            );\n            if (i + 1 < iz) {\n                result.push(\"${\" + space);\n                result.push(\n                    this.generateExpression(\n                        expr.expressions[i],\n                        Precedence.Sequence,\n                        E_TTT\n                    )\n                );\n                result.push(space + \"}\");\n            }\n        }\n        result.push(\"`\");\n        return result;\n    },\n\n    ModuleSpecifier: function (expr, precedence, flags) {\n        return this.Literal(expr, precedence, flags);\n    },\n};\n\nmerge(CodeGenerator.prototype, CodeGenerator.Expression);\n\nCodeGenerator.prototype.generateExpression = function (\n    expr,\n    precedence,\n    flags\n) {\n    var result, type;\n\n    type = expr.type || Syntax.Property;\n\n    if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n        return generateVerbatim(expr, precedence);\n    }\n\n    result = this[type](expr, precedence, flags);\n\n    if (extra.comment) {\n        result = addComments(expr, result);\n    }\n    return toSourceNodeWhenNeeded(result, expr);\n};\n\nCodeGenerator.prototype.generateStatement = function (stmt, flags) {\n    var result, fragment;\n\n    result = this[stmt.type](stmt, flags);\n\n    // Attach comments\n\n    if (extra.comment) {\n        result = addComments(stmt, result);\n    }\n\n    fragment = toSourceNodeWhenNeeded(result).toString();\n    if (\n        stmt.type === Syntax.Program &&\n        !safeConcatenation &&\n        newline === \"\" &&\n        fragment.charAt(fragment.length - 1) === \"\\n\"\n    ) {\n        result = sourceMap\n            ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, \"\")\n            : fragment.replace(/\\s+$/, \"\");\n    }\n\n    return toSourceNodeWhenNeeded(result, stmt);\n};\n\nfunction generateInternal(node) {\n    var codegen;\n\n    codegen = new CodeGenerator();\n    if (isStatement(node)) {\n        return codegen.generateStatement(node, S_TFFF);\n    }\n\n    if (isExpression(node)) {\n        return codegen.generateExpression(node, Precedence.Sequence, E_TTT);\n    }\n\n    throw new Error(\"Unknown node type: \" + node.type);\n}\n/**\n * @param {any} node\n * @param {import(\"escodegen\").GenerateOptions} options\n * @returns {string}\n */\nfunction generate(node, options) {\n    var defaultOptions = getDefaultOptions(),\n        result,\n        pair;\n\n    if (options != null) {\n        // Obsolete options\n        //\n        //   `options.indent`\n        //   `options.base`\n        //\n        // Instead of them, we can use `option.format.indent`.\n        if (typeof options.indent === \"string\") {\n            defaultOptions.format.indent.style = options.indent;\n        }\n        if (typeof options.base === \"number\") {\n            defaultOptions.format.indent.base = options.base;\n        }\n        options = updateDeeply(defaultOptions, options);\n        indent = options.format.indent.style;\n        if (typeof options.base === \"string\") {\n            base = options.base;\n        } else {\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n    } else {\n        options = defaultOptions;\n        indent = options.format.indent.style;\n        base = stringRepeat(indent, options.format.indent.base);\n    }\n    json = options.format.json;\n    renumber = options.format.renumber;\n    hexadecimal = json ? false : options.format.hexadecimal;\n    quotes = json ? \"double\" : options.format.quotes;\n    escapeless = options.format.escapeless;\n    newline = options.format.newline;\n    space = options.format.space;\n    if (options.format.compact) {\n        newline = space = indent = base = \"\";\n    }\n    parentheses = options.format.parentheses;\n    semicolons = options.format.semicolons;\n    safeConcatenation = options.format.safeConcatenation;\n    directive = options.directive;\n    parse = json ? null : options.parse;\n    sourceMap = options.sourceMap;\n    sourceCode = options.sourceCode;\n    preserveBlankLines =\n        options.format.preserveBlankLines && sourceCode !== null;\n    extra = options;\n\n    if (sourceMap) {\n        if (!browser) {\n            SourceNode = function () {};\n            // We assume environment is node.js\n            // And prevent from including source-map by browserify\n            // SourceNode = require('source-map').SourceNode;\n        } else {\n            // SourceNode = global.sourceMap.SourceNode;\n            SourceNode = function () {};\n        }\n    }\n\n    result = generateInternal(node);\n\n    if (!sourceMap) {\n        pair = { code: result.toString(), map: null };\n        return options.sourceMapWithCode ? pair : pair.code;\n    }\n\n    pair = result.toStringWithSourceMap({\n        file: options.file,\n        sourceRoot: options.sourceMapRoot,\n    });\n\n    if (options.sourceContent) {\n        pair.map.setSourceContent(options.sourceMap, options.sourceContent);\n    }\n\n    if (options.sourceMapWithCode) {\n        return pair;\n    }\n\n    return pair.map.toString();\n}\n\nFORMAT_MINIFY = {\n    indent: {\n        style: \"\",\n        base: 0,\n    },\n    renumber: true,\n    hexadecimal: true,\n    quotes: \"auto\",\n    escapeless: true,\n    compact: true,\n    parentheses: false,\n    semicolons: false,\n};\n\nFORMAT_DEFAULTS = getDefaultOptions().format;\n\nexport const version = \"1.11.1\";\nconst _generate = generate;\nexport { _generate as generate };\n// export const attachComments = estraverse.attachComments;\nconst _Precedence = updateDeeply({}, Precedence);\nexport { _Precedence as Precedence };\nexport const browser = true;\nconst _FORMAT_MINIFY = FORMAT_MINIFY;\nexport { _FORMAT_MINIFY as FORMAT_MINIFY };\nconst _FORMAT_DEFAULTS = FORMAT_DEFAULTS;\nexport { _FORMAT_DEFAULTS as FORMAT_DEFAULTS };\n// }());\n/* vim: set sw=4 ts=4 et tw=80 : */\n"],"names":["_Syntax","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ComprehensionBlock","ComprehensionExpression","ConditionalExpression","ContinueStatement","DebuggerStatement","DirectiveStatement","DoWhileStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","GeneratorExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","ModuleSpecifier","NewExpression","ObjectExpression","ObjectPattern","Program","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchStatement","SwitchCase","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","ES6Regex","ES5Regex","NON_ASCII_WHITESPACES","IDENTIFIER_START","IDENTIFIER_PART","ch","fromCodePoint","cp","String","fromCharCode","Math","floor","NonAsciiIdentifierStart","NonAsciiIdentifierPart","Array","_default","isDecimalDigit","isHexDigit","isOctalDigit","isWhiteSpace","indexOf","isLineTerminator","isIdentifierStartES5","test","isIdentifierPartES5","isIdentifierStartES6","isIdentifierPartES6","Precedence","BinaryPrecedence","SourceNode","base","indent","json","renumber","hexadecimal","quotes","escapeless","newline","space","parentheses","semicolons","safeConcatenation","directive","extra","parse","sourceCode","preserveBlankLines","sourceMap","isStatement","node","CodeGenerator","Statement","hasOwnProperty","type","Sequence","Yield","Assignment","Conditional","ArrowFunction","LogicalOR","LogicalAND","BitwiseOR","BitwiseXOR","BitwiseAND","Equality","Relational","BitwiseSHIFT","Additive","Multiplicative","Await","Unary","Postfix","Call","New","TaggedTemplate","Member","Primary","is","isnt","in","instanceof","stringRepeat","str","num","result","endsWithLineTerminator","len","length","esutilscode","charCodeAt","merge","target","override","key","updateDeeply","val","isHashObject","Object","RegExp","escapeRegExpCharacter","previousIsBackslash","escapeAllowedCharacter","code","next","hex","toString","toUpperCase","slice","escapeDisallowedCharacter","Error","flattenToString","arr","i","iz","elem","isArray","toSourceNodeWhenNeeded","generated","loc","name","start","line","column","source","noEmptySpace","join","left","right","leftSource","rightSource","leftCharCode","rightCharCode","addIndent","stmt","withIndent","fn","previousBase","generateComment","comment","specialBase","value","format","adjustMultilineComment","array","j","spaces","sn","split","Number","MAX_VALUE","addComments","save","tailingToStatement","fragment","extRange","range","prevRange","prefix","count","leadingComments","extendedRange","substring","match","push","Syntax","body","trailingComments","calculateSpaces","generateBlankLines","end","newlineCount","parenthesize","text","current","should","generateVerbatimString","string","generateIdentifier","generateAsyncPrefix","spaceRequired","async","generateStarSuffix","generator","moz","starlessGenerator","generateMethodPrefix","prop","func","computed","generateInternal","codegen","generateStatement","Expression","isExpression","generateExpression","F_ALLOW_IN","prototype","maybeBlock","flags","noLeadingComment","that","this","maybeBlockSuffix","ends","generatePattern","precedence","generateFunctionParams","hasDefault","rest","defaults","params","generateAssignment","generateFunctionBody","expr","expression","charAt","generateIterationForStatement","operator","await","kind","declarations","generatePropertyKey","semicolon","content","bodyFlags","label","id","superClass","raw","quote","escapeDirective","guard","param","splice","declaration","specifiers","ExportBatchSpecifier","isClassPrefixed","isFunctionPrefixed","isAsyncPrefixed","cursor","itemFlags","F_ALLOW_CALL","init","block","argument","guardedHandlers","handlers","finalizer","handler","discriminant","cases","consequent","alternate","update","object","expressions","currentPrecedence","callee","property","meta","delegate","all","isPattern","multiline","elements","shorthand","method","properties","local","imported","exported","e","single","singleQuotes","doubleQuotes","escapeString","point","temp","exponent","pos","replace","generateNumber","regex","pattern","reg","characterInBrack","generateRegExp","comprehensionExpressionStartsWithAssignment","blocks","filter","of","tag","quasi","quasis","verbatim","generateVerbatim","replaceRight","_generate","options","pair","defaultOptions","style","compact","sourceMapRoot","sourceMapWithCode","toStringWithSourceMap","file","sourceRoot","sourceContent","map","setSourceContent"],"mappings":"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"}